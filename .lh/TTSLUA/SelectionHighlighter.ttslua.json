{
    "sourceFile": "TTSLUA/SelectionHighlighter.ttslua",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1738016504277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738016522449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,100 @@\n+-- FTC-GUID: 27de4f,84c3a4\n+\n+-- This script highlights objects in green when they are selected by a player.\n+local selectedObjects = {}\n+local checkInterval = 0.1\n+\n+function onLoad()\n+--    ---- Just destroy it (if it exists). If it doesn't exist, TTS won't error out.\n+    Timer.destroy(\"checkSelections\")\n+--    --\n+--    ---- Wait 30 frames, then move ourselves below the table\n+    Wait.frames(function()\n+--    --    self.setPosition({-5, -5, -5})\n+    --    self.setLock(true)\n+        self.interactable = false\n+    end, 30)\n+--\n+    -- Create the timer\n+    Timer.create({\n+        identifier    = \"checkSelections\",\n+        function_name = \"checkSelections\",\n+        delay         = checkInterval,\n+        repetitions   = 0\n+    })\n+end\n+\n+function getHighlightColorForPlayer(playerColor)\n+    local colorMapping = {\n+        Red = {1, 0, 0}, -- Red\n+        Blue = {0, 0, 1}, -- Blue\n+        Green = {0, 1, 0}, -- Green\n+        Yellow = {1, 1, 0}, -- Yellow\n+        Purple = {0.5, 0, 0.5}, -- Purple\n+        Orange = {1, 0.5, 0}, -- Orange\n+        White = {1, 1, 1}, -- White\n+        Black = {0, 0, 0} -- Black\n+    }\n+\n+    return colorMapping[playerColor] or {0.5, 0.5, 0.5} -- Default to gray if color not found\n+end\n+\n+function onDestroy()\n+    Timer.destroy(\"checkSelections\")\n+    clearAllHighlights()\n+end\n+\n+function checkSelections()\n+    local currentSelections = {}\n+\n+    for _, player in ipairs(Player.getPlayers()) do\n+        local selected = player.getSelectedObjects() or {}\n+        local playerColor = player.color\n+        local highlightColor = getHighlightColorForPlayer(playerColor) -- Get color based on player\n+\n+        for _, obj in ipairs(selected) do\n+            local guid = obj.getGUID()\n+\n+            if (obj.tag == \"Figurine\" or obj.tag == \"Generic\" or obj.tag == \"Custom_Model\") and not selectedObjects[guid] then\n+                selectedObjects[guid] = {\n+                    object = obj,\n+                    originalColor = obj.getHighlightColor()\n+                }\n+                obj.highlightOn(highlightColor) -- Highlight in player's color\n+            end\n+\n+            currentSelections[guid] = true\n+        end\n+    end\n+\n+    for guid, data in pairs(selectedObjects) do\n+        if not currentSelections[guid] then\n+            local obj = data.object\n+            if obj then\n+                if data.originalColor then\n+                    obj.highlightOn(data.originalColor)\n+                else\n+                    obj.highlightOff()\n+                end\n+            end\n+            selectedObjects[guid] = nil\n+        end\n+    end\n+end\n+\n+\n+\n+function clearAllHighlights()\n+    for guid, data in pairs(selectedObjects) do\n+        local obj = data.object\n+        if obj then\n+            -- If it had an original color, restore it\n+            if data.originalColor then\n+                obj.highlightOn(data.originalColor)\n+            else\n+                obj.highlightOff()\n+            end\n+        end\n+    end\n+    selectedObjects = {}\n+end\n"
                }
            ],
            "date": 1738016504277,
            "name": "Commit-0",
            "content": "-- FTC-GUID: 7cab7a\nlocal displayText = \"0\"\nlocal numpadButtons = {\n    { \"C\", \"7\", \"8\", \"9\" },\n    { \"←\", \"4\", \"5\", \"6\" },\n    { \"0\", \"1\", \"2\", \"3\" },\n    { \"/\", \"*\", \"-\", \"+\" },\n    { \"Enter\" }\n}\nlocal buttonWidth = 700\nlocal buttonHeight = 500\nlocal fontSize = 250\nlocal spacing = 800\nlocal startX = -1200\nlocal startY = 1600\n\nfunction onLoad()\n    self.clearButtons()\n    createDisplay()\n    createNumpad()\nend\n\nfunction createDisplay()\n    self.createButton({\n        label = displayText,\n        click_function = \"doNothing\",\n        function_owner = self,\n        position = { 0, 0.3, startY / 1000 + 0.8 },\n        rotation = { 0, 180, 0 },  -- Rotated 180 degrees\n        width = 3500,\n        height = 600,\n        font_size = fontSize,\n        color = { 0, 0, 0 },\n        font_color = { 1, 1, 1 }\n    })\nend\n\nfunction createNumpad()\n    for rowIndex, row in ipairs(numpadButtons) do\n        for colIndex, button in ipairs(row) do\n            local posX = startX + (colIndex - 1) * spacing\n            local posY = startY - (rowIndex - 1) * spacing\n            self.createButton({\n                label = button,\n                click_function = \"numpadClick_\" .. button,\n                function_owner = self,\n                position = { posX / 1000, 0.3, posY / 1000 },\n                rotation = { 0, 180, 0 },  -- Rotated 180 degrees\n                width = buttonWidth,\n                height = buttonHeight,\n                font_size = fontSize,\n                color = { 0.2, 0.2, 0.2 },\n                font_color = { 1, 1, 1 }\n            })\n            _G[\"numpadClick_\" .. button] = function() numpadClick(button) end\n        end\n    end\nend\n\nfunction numpadClick(input)\n    if input == \"C\" then\n        displayText = \"0\"\n    elseif input == \"←\" then\n        displayText = displayText:sub(1, -2)\n        if displayText == \"\" then displayText = \"0\" end\n    elseif input == \"Enter\" then\n        local result, err = load(\"return \" .. displayText)\n        if result then\n            local success, evaluated = pcall(result)\n            if success then\n                displayText = tostring(evaluated)\n            else\n                displayText = \"Error\"\n            end\n        else\n            displayText = \"Error\"\n        end\n    else\n        if displayText == \"0\" then\n            displayText = input\n        else\n            displayText = displayText .. input\n        end\n    end\n    updateDisplay()\nend\n\nfunction updateDisplay()\n    self.editButton({\n        index = 0,\n        label = displayText\n    })\nend\n\nfunction doNothing() end\n"
        }
    ]
}