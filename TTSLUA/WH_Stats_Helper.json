{
  "GUID": "863da2",
  "Name": "Checker_red",
  "Transform": {
    "posX": 65.82076836,
    "posY": -4,
    "posZ": 75,
    "rotX": 0,
    "rotY": 180.021637,
    "rotZ": 0,
    "scaleX": 1,
    "scaleY": 1,
    "scaleZ": 1
  },
  "Nickname": "Red WH Stats Helper",
  "Description": "",
  "GMNotes": "",
  "AltLookAngle": {
    "x": 0,
    "y": 0,
    "z": 0
  },
  "ColorDiffuse": {
    "r": 1,
    "g": 0,
    "b": 0
  },
  "LayoutGroupSortIndex": 0,
  "Value": 0,
  "Locked": true,
  "Grid": true,
  "Snap": true,
  "IgnoreFoW": false,
  "MeasureMovement": false,
  "DragSelectable": true,
  "Autoraise": false,
  "Sticky": true,
  "Tooltip": false,
  "GridProjection": false,
  "HideWhenFaceDown": false,
  "Hands": false,
  "LuaScript": "-- FTC-GUID: 863da2,863da8\r\nversion = \"2.13\"\r\ncurrentSelection = {}\r\nweaponColors = {}\r\nspawnedDiceCount = 0\r\nsavedPositions = {}\r\nspawnPosition = nil\r\ncustomDieData = nil\r\n\r\nfunction onSave()\r\n  return JSON.encode({\r\n    spawnPosition = spawnPosition,\r\n    customDieData = customDieData\r\n  })\r\nend\r\n\r\nfunction onLoad(data)\r\n  addHotkey(\"Save position\", savePositionClicked)\r\n  addHotkey(\"Restore position\", restorePositionClicked)\r\n  self.addContextMenuItem(\"Set Custom Dice\", onSetCustomDiceClicked)\r\n  self.addContextMenuItem(\"Reset Custom Dice\", onResetCustomDiceClicked)\r\n  self.addContextMenuItem(\"Set Spawn Position\", onSetSpawnPositionClicked)\r\n  self.addContextMenuItem(\"Reset Spawn Position\", onResetSpawnPositionClicked)\r\n  self.addContextMenuItem(\"Version\", onVersionClicked)\r\n  restoreSavedData(data)\r\nend\r\n\r\nfunction restoreSavedData(data)\r\n    if data == nil or data == \"\" then\r\n        return\r\n    end\r\n\r\n    local parsedData = JSON.decode(data)\r\n    if parsedData then\r\n        spawnPosition = parsedData.spawnPosition or nil\r\n        customDieData = parsedData.customDieData or nil\r\n    end\r\nend\r\n\r\n\r\nfunction onResetSpawnPositionClicked()\r\n  spawnPosition = nil\r\n  printMessage(\"Spawn position reset complete!\")\r\nend\r\n\r\nfunction onSetSpawnPositionClicked()\r\n    local marker = findSpawnPositionMarker()\r\n    if marker == nil then\r\n        createSpawnPositionMarker()\r\n        printMessage(\"Place the marker on the desired position and click \\\"Set Spawn Position\\\" again\")\r\n    else\r\n        saveSpawnPosition(marker)\r\n        printMessage(\"Spawn position successfully configured!\")\r\n    end\r\nend\r\n\r\nfunction saveSpawnPosition(marker)\r\n  spawnPosition = {marker.getPosition()[1] - 1, marker.getPosition()[2], marker.getPosition()[3] - 1}\r\n  marker.destruct()\r\nend\r\n\r\nfunction createSpawnPositionMarker()\r\n  spawnObject({\r\n    type = \"go_game_piece_white\",\r\n    position = getPositionAboveMe(),\r\n    callback_function = function(obj)\r\n      obj.setName(\"Place me on the spawn position and click \\\"Set Spawn\\\" again\")\r\n      obj.addTag(\"SpawnMarker\")\r\n    end\r\n  })\r\nend\r\n\r\nfunction findSpawnPositionMarker()\r\n  local objs = getAllObjects()\r\n\r\n  for i,v in ipairs(objs) do\r\n    if v.hasTag(\"SpawnMarker\") then\r\n      return v\r\n    end\r\n  end\r\nend\r\n\r\nfunction onVersionClicked()\r\n  print(version)\r\nend\r\n\r\nfunction onResetCustomDiceClicked()\r\n  customDieData = nil\r\n  printMessage(\"Custom die data reset complete!\")\r\nend\r\n\r\nfunction onSetCustomDiceClicked()\r\n  local die = findCustomDie()\r\n  if die == nil then\r\n    printMessage(\"Place your die in the white zone\")\r\n  else\r\n    saveCustomDie(die)\r\n    die.destruct()\r\n    printMessage(\"Custom Die successfully configured!\")\r\n  end\r\nend\r\n\r\nfunction getPositionAboveMe()\r\n  return self.positionToWorld({0, 3, 8})\r\nend\r\n\r\nfunction findCustomDie()\r\n  local cast = Physics.cast({\r\n    debug = true,\r\n    direction = {0, -1, 0},\r\n    origin = getPositionAboveMe(),\r\n    type = 3,\r\n    size = {4, 1, 4}\r\n  })\r\n\r\n  for i,v in ipairs(cast) do\r\n    if v.hit_object.tag == \"Dice\" then\r\n      return v.hit_object\r\n    end\r\n  end\r\nend\r\n\r\nfunction saveCustomDie(die)\r\n  customDieData = {}\r\n  customDieData.colorTint = die.getColorTint()\r\n  customDieData.image = die.getCustomObject().image\r\nend\r\n\r\nfunction savePositionClicked(playerColor, hoveredObject)\r\n  savedPositions = {}\r\n  local objects = getObjectsPositionToSave(Player[playerColor], hoveredObject)\r\n\r\n  if objects != nil then\r\n    for i,v in ipairs(objects) do\r\n      savePosition(v)\r\n    end\r\n    printToColor(#objects..\" objects positions saved!\", playerColor)\r\n  end\r\nend\r\n\r\nfunction restorePositionClicked(playerColor)\r\n    for i, v in ipairs(savedPositions) do\r\n        local obj = getObjectFromGUID(v.guid)\r\n        if obj then  -- Ensure obj is not nil\r\n            obj.setRotation(v.rotation)\r\n            obj.setPositionSmooth(v.position, false, true)\r\n        end\r\n    end\r\nend\r\n\r\nfunction getObjectsPositionToSave(player, hoveredObject)\r\n  if #player.getSelectedObjects() != 0 then\r\n    return player.getSelectedObjects()\r\n  elseif hoveredObject != nil then\r\n    return table.insert({}, hoveredObject)\r\n  end\r\n  return nil\r\nend\r\n\r\nfunction savePosition(obj)\r\n  table.insert(savedPositions, {\r\n    guid = obj.getGUID(),\r\n    position = obj.getPosition(),\r\n    rotation = obj.getRotation()\r\n  })\r\nend\r\n\r\nfunction setCurrentSelection(player)\r\n  if (#player.getSelectedObjects() == 0) then\r\n    printMessage(\"Select some models first!\")\r\n    return false\r\n  end\r\n  currentSelection = player.getSelectedObjects()\r\n  return true\r\nend\r\n\r\nfunction onCountClicked(player)\r\n  cleanUpWeaponsData()\r\n  if setCurrentSelection(player) then\r\n    drawWeaponData(player.getSelectedObjects())\r\n  end\r\nend\r\n\r\nfunction onShowRangeEditEnd(player, value, id)\r\n  cleanCurrentVectorLines()\r\n  if setCurrentSelection(player) then\r\n    drawFiguresRange(currentSelection, tonumber(value))\r\n  end\r\nend\r\n\r\nfunction onCleanClicked(player)\r\n  if (#player.getSelectedObjects() != 0) then\r\n    currentSelection = player.getSelectedObjects()\r\n  end\r\n  cleanCurrentVectorLines()\r\nend\r\n\r\nfunction cleanUpWeaponsData()\r\n  drawWeaponData({})\r\n  spawnedDiceCount = 0\r\nend\r\n\r\nfunction drawFiguresRange(figures, range)\r\n  for i,v in ipairs(figures) do\r\n    drawFigureRange(range, v)\r\n  end\r\nend\r\n\r\nfunction cleanCurrentVectorLines()\r\n  for i,v in ipairs(currentSelection) do\r\n    v.setVectorLines({})\r\n  end\r\nend\r\n\r\nfunction drawWeaponData(figures)\r\n  drawWeaponsDataUI(createWeaponsMap(createFiguresData(figures)))\r\nend\r\n\r\nfunction drawWeaponsDataUI(weaponMap)\r\n  local ui = self.UI.getXmlTable()\r\n  ui[2].children[3].children = createWeaponTableRows(weaponMap)\r\n  self.UI.setXmlTable(ui)\r\nend\r\n\r\nfunction createWeaponTableRows(weaponMap)\r\n  local result = {}\r\n  for i,v in pairs(weaponMap) do\r\n    table.insert(result, createWeaponRowUI(v))\r\n  end\r\n  return result\r\nend\r\n\r\nfunction createWeaponRowUI(weaponData)\r\n  return {\r\n    tag = \"Row\",\r\n    attributes = {\r\n      preferredHeight = 130\r\n    },\r\n    children = {\r\n      createTextCell(weaponData.data.name),\r\n      createTextCell(weaponData.data.stats),\r\n      createTextCell(weaponData.count),\r\n      createButtonCell(getAttackInfo(weaponData), getAttackButtonId(weaponData), \"onAttackClicked\"),\r\n      createButtonCell(getRangeText(weaponData.data.range), \"rangeButton_\"..weaponData.data.name, \"onRangeClicked\"),\r\n    }\r\n  }\r\nend\r\n\r\nfunction getAttackButtonId(weaponData)\r\n  local acc = weaponData.data.accuracy\r\n  local str = weaponData.data.strength\r\n  local ap = weaponData.data.ap\r\n  local d = weaponData.data.damage\r\n  return \"attackButton__\"..weaponData.data.name..\"__\"..acc..\"__\"..str..\"__\"..ap..\"__\"..d\r\nend\r\n\r\nfunction getWeaponDataFromAttackButtonId(id)\r\n  local arr = splitStr(id, \"__\")\r\n  return {\r\n    name = arr[2],\r\n    accuracy = arr[3],\r\n    strength = arr[4],\r\n    ap = arr[5],\r\n    damage = arr[6]\r\n  }\r\nend\r\n\r\nfunction getAttackInfo(weaponData)\r\n  local result = \"\";\r\n  if weaponData.attack != 0 then\r\n    result = result..tostring(weaponData.attack)\r\n  end\r\n  if weaponData.data.bonusAttack then\r\n    local pref = weaponData.count > 1 and weaponData.count..\"*\" or \"\"\r\n    return pref..weaponData.data.bonusAttack\r\n  end\r\n  return result\r\nend\r\n\r\nfunction spawnDices(count, color, weaponName, offset, ap, strength, dmg, melta, devastating)\r\n  local ratioX = math.cos(math.rad(self.getRotation()[2]))\r\n  local ratioY = math.sin(math.rad(self.getRotation()[2]))\r\n  local rowSize = 20\r\n  for i = 1, count do\r\n    local column = (i + offset - 1) % rowSize + 1\r\n    local row = math.ceil((i + offset) \/ rowSize)\r\n    local startingPosition = spawnPosition or self.getPosition()\r\n    local rowShift = spawnPosition == nil and 3 or 0\r\n\r\n    local x = startingPosition[1] + column * ratioX + ratioY * (rowShift + row)\r\n    local z = startingPosition[3] + (rowShift + row) * ratioX - column * ratioY\r\n\r\n      local apStr       = tostring(ap or \"0\")\r\n      local strengthStr = tostring(strength or \"?\")\r\n      local dmgStr      = tostring(dmg or \"?\")\r\n      local meltaStr    = (melta and melta ~= \"\") and \" [ffffff](Melta \"..melta..\")[-]\" or \"\"\r\n      local devStr      = devastating == true and \" [ffffff](Dev)[-]\" or \"\"\r\n\r\n      -- Example ASCII-ish \u201Ctable\u201D\r\n      -- The lines may need more or fewer dashes to look centered for your text.\r\n      local tooltip =\r\n        \"[000000]|[-][ffff00] AP: \"..apStr..\" \"..weaponName..\"[-]\"..devStr..\" \"..meltaStr\r\n        -- \"\\n[ffff00]--------------------------------[-]\\n\"..\r\n        -- \"[ffff00]|[-]  AP: \"..apStr..\"   S: \"..strengthStr..\"   D: \"..dmgStr..\"  [ffff00]|[-]\\n\"..\r\n        -- \"[ffff00]--------------------------------[-]\"\r\n\r\n    local die = spawnObject({\r\n      type = getDiceType(),\r\n      position = {x, self.getPosition()[2] + 1, z},\r\n      callback_function = function(dice)\r\n        setDieTint(dice, color)\r\n        dice.setName(tooltip)\r\n      end\r\n    })\r\n    setDieCustomObject(die)\r\n  end\r\nend\r\n\r\nfunction setDieCustomObject(die)\r\n  if customDieData and customDieData.image then\r\n    die.setCustomObject({\r\n      image = customDieData.image,\r\n      type = 1\r\n    })\r\n  end\r\nend\r\n\r\nfunction setDieTint(die, color)\r\n  local customTint = customDieData and customDieData.colorTint\r\n  die.setColorTint(customTint or color)\r\nend\r\n\r\nfunction getDiceType()\r\n  if customDieData and customDieData.image then\r\n    return \"Custom_Dice\"\r\n  end\r\n\r\n  return \"Die_6\"\r\nend\r\n\r\nfunction onAttackClicked(player, _, id)\r\n  if (#currentSelection == 0) then\r\n    return\r\n  end\r\n  spawnDicesForWeaponByFigures(getWeaponDataFromAttackButtonId(id), currentSelection)\r\nend\r\n\r\nfunction spawnDicesForWeaponByFigures(weaponStats, figures)\r\n  local weaponMap = createWeaponsMap(createFiguresData(figures))\r\n  local weaponData = findWeaponByStats(weaponMap, weaponStats)\r\n  if weaponData != nil then\r\n    spawnDicesForWeapon(weaponData)\r\n  end\r\nend\r\n\r\nfunction parseWeaponBlock(arr, fromIndex)\r\n  local result = {}\r\n  local i = fromIndex\r\n  while i < #arr do\r\n    if TrimString(arr[i + 1]) == \"\" or getBlockName(arr[i + 1]) ~= nil then\r\n      return result\r\n    end\r\n\r\n    local name      = parseWeaponName(arr[i + 1])\r\n    local thirdLine = arr[i + 3]\r\n                     and ( string.find(arr[i + 3], \"%[\/sup%]\")\r\n                       or string.find(removeColorTags(arr[i + 3]), \"%[.*%]\") )\r\n    local stats     = TrimString(removeColorTags(arr[i + 2]))\r\n    if thirdLine then\r\n      stats = stats..\"\\n\"..TrimString(removeColorTags(arr[i + 3]))\r\n    end\r\n\r\n    local weaponData = {\r\n      name     = name,\r\n      stats    = stats,\r\n      range    = parseRange(stats),\r\n      attack   = parseWeaponAttack(stats),\r\n      accuracy = parseWeaponAccuracy(stats),\r\n      strength = getWeaponStatValue(stats, \"S\"),\r\n      ap       = getWeaponStatValue(stats, \"AP\"),\r\n      damage   = getWeaponStatValue(stats, \"D\")\r\n    }\r\n\r\n-- If you also want to capture a numeric value for Devastating Wounds (e.g. \"Devastating Wounds 2\"),\r\n-- you can do something like this inside your parseWeaponBlock where you match bracketed rules:\r\n\r\n  local bracketContent = stats:match(\"%[(.-)%]\")\r\n\r\n  if bracketContent then\r\n    local lowerBracket = bracketContent:lower()\r\n\r\n    for rule in lowerBracket:gmatch(\"([^,]+)\") do\r\n      rule = TrimString(rule)\r\n\r\n      -- MELTA\r\n      if rule:find(\"melta\") then\r\n        local meltaNum = bracketContent:match(\"[Mm]elta%s*(%d+)\")\r\n        if meltaNum then\r\n          weaponData.melta = meltaNum\r\n        end\r\n      end\r\n\r\n      if rule:find(\"devastating wounds\") then\r\n        weaponData.devastating = true\r\n      end\r\n    end\r\n  end\r\n\r\n    table.insert(result, weaponData)\r\n    i = i + 2\r\n    if thirdLine then\r\n      i = i + 1\r\n    end\r\n  end\r\n  return result\r\nend\r\n\r\nfunction findWeaponByStats(weaponMap, stats)\r\n  local key = getWeaponKey(stats)\r\n  for i,v in pairs(weaponMap) do\r\n    if i == key then\r\n      return v\r\n    end\r\n  end\r\nend\r\n\r\nfunction spawnDicesForWeapon(weaponMapData)\r\n  local ap         = weaponMapData.data.ap or \"0\"\r\n  local strength   = weaponMapData.data.strength or \"?\"\r\n  local dmg        = weaponMapData.data.damage or \"?\"\r\n  local melta      = weaponMapData.data.melta or \"\"\r\n  local devastating = weaponMapData.data.devastating or false\r\n\r\n  local attacks = getWeaponMapAttacks(weaponMapData)\r\n  spawnDices(attacks, getWeaponColor(getWeaponKey(weaponMapData.data)), getWeaponDescription(weaponMapData.data), spawnedDiceCount,\r\n                                                                                                                                     ap,\r\n                                                                                                                                      strength,dmg,\r\n                                                                                                                                      melta,\r\n                                                                                                                                      devastating)\r\n  spawnedDiceCount = spawnedDiceCount + attacks\r\nend\r\n\r\n\r\nfunction getWeaponMapNumAttacks(weaponMapData)\r\n  local attack = DecomposeAttackStr(weaponMapData.attack)\r\n  local numAttacks = attack.rawNum\r\n\r\n  -- Roll D6 dice and display each result\r\n  if attack.numD6 > 0 then\r\n    local randResult = 0\r\n    for i = 1, attack.numD6 do\r\n      local roll = math.random(6)\r\n      randResult = randResult + roll\r\n      printMessage(\"Rolling one D6, the value is: \" .. roll)\r\n    end\r\n    numAttacks = numAttacks + randResult\r\n  end\r\n\r\n  -- Roll D3 dice and display each result\r\n  if attack.numD3 > 0 then\r\n    local randResult = 0\r\n    for i = 1, attack.numD3 do\r\n      local roll = math.random(3)\r\n      randResult = randResult + roll\r\n      printMessage(\"Rolling one D3, the value is: \" .. roll)\r\n    end\r\n    numAttacks = numAttacks + randResult\r\n  end\r\n\r\n  return numAttacks\r\nend\r\n\r\nfunction getWeaponMapAttacks(weaponMapData)\r\n  if weaponMapData.data.bonusAttack then\r\n    return getBonusAttackValueForCount(weaponMapData.data.bonusAttack, weaponMapData.count)\r\n  end\r\n  return weaponMapData.attack\r\nend\r\n\r\nfunction getBonusAttackAppendum(appendum)\r\n  if tonumber(appendum) ~= nil then\r\n    return tonumber(appendum)\r\n  end\r\n\r\n  if string.find(appendum, \"D\") ~= nil then\r\n    local split = splitStr(appendum, \"D\")\r\n    local count = (#split == 2) and tonumber(split[1]) or 1\r\n    local value = (#split == 2) and tonumber(split[2]) or tonumber(split[1])\r\n    local result = 0\r\n\r\n    -- Roll the dice and display each result\r\n    for i = 1, count do\r\n      local roll = math.random(value)\r\n      printMessage(\"Rolling one D\" .. value .. \", the value is: \" .. roll)\r\n      result = result + roll\r\n    end\r\n    return result\r\n  end\r\n\r\n  return 0\r\nend\r\n\r\n\r\nfunction getBonusAttackValueForCount(bonusAttack, count)\r\n  local result = 0\r\n  for i = 1, count do\r\n    result = result + getBonusAttackValue(bonusAttack)\r\n  end\r\n  return result\r\nend\r\n\r\nfunction getBonusAttackValue(bonusAttack)\r\n  local appendums = splitStr(bonusAttack, \"+\")\r\n  local result = 0\r\n  for i,app in ipairs(appendums) do\r\n    result = result + getBonusAttackAppendum(app)\r\n  end\r\n  return result\r\nend\r\n\r\nfunction getBonusAttackAppendum(appendum)\r\n  if tonumber(appendum) != nil then\r\n    return tonumber(appendum)\r\n  end\r\n  if string.find(appendum, \"D\") != nil then\r\n    local split = splitStr(appendum, \"D\")\r\n    local count = (#split == 2) and tonumber(split[1]) or 1\r\n    local value = (#split == 2) and tonumber(split[2]) or tonumber(split[1])\r\n    local result = 0\r\n    for i = 1, count do\r\n      local rnd = math.random(value)\r\n      printMessage(\"Rolling one D\"..value..\", the value is: \"..rnd)\r\n      result = result + rnd\r\n    end\r\n    return result\r\n  end\r\n  return 0\r\nend\r\n\r\nfunction getWeaponDescription(weaponData)\r\n  return \"[c6c930]\"..weaponData.name..\" [-]\"\r\nend\r\n\r\nfunction getWeaponColor(name)\r\n  if weaponColors[name] == nil then\r\n    local color = {math.random(), math.random(), math.random()}\r\n    weaponColors[name] = color\r\n  end\r\n\r\n  return weaponColors[name]\r\nend\r\n\r\nfunction onRangeClicked(player, _, id)\r\nend\r\n\r\nfunction drawRangeForWeapon(name, figures)\r\n  local figuresData = createFiguresData(figures)\r\n  for i,v in ipairs(figuresData) do\r\n    local weapon = getFigureWeaponByName(v, name)\r\n    if weapon != nil then\r\n      drawFigureRange(weapon.range, figures[i])\r\n    end\r\n  end\r\nend\r\n\r\nfunction getFigureWeaponByName(figureData, weaponName)\r\n  for i,v in ipairs(figureData.ranged) do\r\n    if v.name == weaponName then\r\n      return v\r\n    end\r\n  end\r\nend\r\n\r\nfunction drawFigureRange(range, figure)\r\n  range = range \/ figure.getScale()[1]\r\n  local width = (figure.getBounds().size[1] \/ 2) \/ figure.getScale()[1]\r\n  figure.setVectorLines({getCircleVectorPoints(range + width, 30, 0.5, 0.1 \/ figure.getScale()[1])})\r\nend\r\n\r\nfunction getCircleVectorPoints(radius, steps, y, thickness)\r\n    local points = {}\r\n    local angle = 360 \/ steps\r\n\r\n    for i = 0,steps do\r\n        table.insert(points, {\r\n            math.cos(math.rad(angle * i)) * radius,\r\n            y,\r\n            math.sin(math.rad(angle * i)) * radius\r\n        })\r\n    end\r\n\r\n    return {\r\n      points = points,\r\n      thickness = thickness\r\n    }\r\nend\r\n\r\nfunction getRangeText(range)\r\n  if range == nil then\r\n    return \"-\"\r\n  end\r\n  return \"\u2033\"..tostring(range)\r\nend\r\n\r\nfunction createButtonCell(text, id, click)\r\n  return {\r\n    tag = \"Cell\",\r\n    children = {\r\n      {\r\n        tag = \"Button\",\r\n        attributes = {\r\n          text = text,\r\n          id = id,\r\n          onClick = click\r\n        }\r\n      }\r\n    }\r\n  }\r\nend\r\n\r\nfunction createTextCell(text)\r\n  return {\r\n    tag = \"Cell\",\r\n    children = {\r\n      {\r\n        tag = \"Text\",\r\n        attributes = {\r\n          text = text\r\n        }\r\n      }\r\n    }\r\n  }\r\nend\r\n\r\nfunction createFiguresData(figures)\r\n  local result = {}\r\n  for i,v in ipairs(figures) do\r\n    table.insert(result, parseFigureData(v))\r\n  end\r\n  return result\r\nend\r\n\r\nfunction createWeaponsMap(figuresData)\r\n  local result = {}\r\n  for i,v in ipairs(figuresData) do\r\n    convertWeaponDataToMap(v.ranged, result)\r\n  end\r\n  for i,v in ipairs(figuresData) do\r\n    convertWeaponDataToMap(v.melee, result)\r\n  end\r\n  return result\r\nend\r\n\r\nfunction convertWeaponDataToMap(weaponsData, resultData)\r\n  for i,v in ipairs(weaponsData) do\r\n    local key = getWeaponKey(v)\r\n    if resultData[key] == nil then\r\n      resultData[key] = {\r\n        count = 0,\r\n        attack = 0,\r\n        data = v\r\n      }\r\n    end\r\n    resultData[key].count = resultData[key].count + 1\r\n    resultData[key].attack = resultData[key].attack + v.attack\r\n  end\r\nend\r\n\r\nfunction getWeaponKey(weaponData)\r\n  local acc = weaponData.accuracy\r\n  local str = weaponData.strength\r\n  local ap = weaponData.ap\r\n  local d = weaponData.damage\r\n  return weaponData.name..acc..str..ap..d\r\nend\r\n\r\nfunction parseFigureData(figure)\r\n  local arr = splitStr(figure.getDescription(), \"\\n\")\r\n  local result = {\r\n    ranged = {},\r\n    melee = {}\r\n  }\r\n  for i,v in ipairs(arr) do\r\n    if (getBlockName(v) != nil) and (getBlockName(v) != \"abilities\") then\r\n      result[getBlockName(v)] = parseWeaponBlock(arr, i)\r\n    end\r\n  end\r\n  local statsHeaders = {\"m\", \"t\", \"sv\", \"w\", \"ld\", \"oc\"}\r\n  local stats = splitStr(arr[2] or \"\", \" \")\r\n  for i,v in ipairs(statsHeaders) do\r\n    result[v] = stats[i]\r\n  end\r\n  return result\r\nend\r\n\r\nfunction parseWeaponBlock(arr, fromIndex)\r\n  local result = {}\r\n  local i = fromIndex\r\n  while i < #arr do\r\n    table.insert(result, {\r\n      name = parseWeaponName(arr[i + 1]),\r\n      stats = removeColorTags(arr[i + 2]),\r\n      range = parseRange(arr[i + 2]),\r\n      attack = parseWeaponAttack(arr[i + 2]),\r\n      bonusAttack = parseWeaponBonusAttack(arr[i + 2]),\r\n      accuracy = parseWeaponAccuracy(arr[i + 2]) or \"\",\r\n      strength = getWeaponStatValue(arr[i + 2], \"S\") or \"\",\r\n      ap = getWeaponStatValue(arr[i + 2], \"AP\") or \"\",\r\n      damage = getWeaponStatValue(arr[i + 2], \"D\") or \"\"\r\n    })\r\n    if getBlockName(arr[i + 3]) != nil then\r\n      return result\r\n    end\r\n    i = i + 2\r\n  end\r\n  return result\r\nend\r\n\r\nfunction removeColorTags(str)\r\n  str = string.gsub(str, \"%[7bc596%]\", \"\")\r\n  str = string.gsub(str, \"%[%-%]\", \"\")\r\n  return str\r\nend\r\n\r\nfunction parseWeaponName(data)\r\n  return string.sub(data, 9, -4)\r\nend\r\n\r\nfunction parseWeaponAccuracy(stats)\r\n  return  getWeaponStatValue(stats, \"BS\") or getWeaponStatValue(stats, \"WS\")\r\nend\r\n\r\nfunction parseWeaponAttack(stats)\r\n  local stat = getWeaponStatValue(stats, \"A\")\r\n  return tonumber(stat) or 0\r\nend\r\n\r\nfunction parseWeaponBonusAttack(stats)\r\n  local stat = getWeaponStatValue(stats, \"A\")\r\n  if tonumber(stat) == nil then\r\n    return stat\r\n  end\r\n  return nil\r\nend\r\n\r\nfunction getWeaponStatValue(stats, statName)\r\n  local statPairs = splitStr(stats, \" \")\r\n  for i,v in ipairs(statPairs) do\r\n    local stat = splitStr(v, \":\")\r\n    if stat[1] == statName then\r\n      return stat[2]\r\n    end\r\n  end\r\nend\r\n\r\nfunction parseRange(stats)\r\n  local inches = string.find(stats, \"\u2033\") or string.find(stats, [[\"]])\r\n  if inches ~= nil then\r\n    return tonumber(string.sub(stats, 1, inches - 1))\r\n  end\r\nend\r\n\r\nfunction getBlockName(str)\r\n  if str == nil then\r\n    return\r\n  end\r\n  if (string.find(str, \"[rR]anged [wW]eapons\") != nil) then\r\n    return \"ranged\"\r\n  end\r\n  if (string.find(str, \"[mM]elee [wW]eapons\") != nil) then\r\n    return \"melee\"\r\n  end\r\n  if (string.find(str, \"[aA]bilities\") != nil) then\r\n    return \"abilities\"\r\n  end\r\nend\r\n\r\nfunction splitStr(inputstr, sep)\r\n  if sep == nil then\r\n    sep = \"%s\"\r\n  end\r\n  local t={}\r\n  for str in string.gmatch(inputstr, \"([^\"..sep..\"]+)\") do\r\n    table.insert(t, str)\r\n  end\r\n  return t\r\nend\r\n\r\nfunction printMessage(text, color)\r\n  color = color or {1, 0.5, 0}\r\n  broadcastToAll(text, color)\r\nend\r\n\r\n  function TrimString(s)\r\n    local a = s:match(\"^%s*()\")\r\n    local b = s:match(\"()%s*$\", a)\r\n    return s:sub(a, b - 1)\r\n  end\r\n\r\n  function DecomposeAttackStr(attack)\r\n    local numD6 = 0\r\n    local numD3 = 0\r\n    local rawNum = 0\r\n    for i, v in ipairs(splitStr(attack, \"+\")) do\r\n      v = TrimString(v)\r\n      local nd6 = v:match(\"^([0-9]*)[dD]6$\")\r\n      if nd6 == \"\" then nd6 = 1 end\r\n      if nd6 then\r\n        numD6 = numD6 + nd6\r\n      end\r\n      local nd3 = v:match(\"^([0-9]*)[dD]3$\")\r\n      if nd3 == \"\" then nd3 = 1 end\r\n      if nd3 then\r\n        numD3 = numD3 + nd3\r\n      end\r\n      if v:match(\"^[0-9]+$\") then\r\n        rawNum = rawNum + v\r\n      end\r\n    end\r\n    return {\r\n      numD6 = numD6,\r\n      numD3 = numD3,\r\n      rawNum = rawNum\r\n    }\r\n  end\r\n\r\n  function ComposeAttack(decomposedAttack)\r\n    local accum = {}\r\n    if decomposedAttack.numD6 == 1 then\r\n      table.insert(accum, \"D6\")\r\n    elseif decomposedAttack.numD6 > 1 then\r\n      table.insert(accum, tostring(decomposedAttack.numD6)..\"D6\")\r\n    end\r\n    if decomposedAttack.numD3 == 1 then\r\n      table.insert(accum, \"D3\")\r\n    elseif decomposedAttack.numD3 > 1 then\r\n      table.insert(accum, tostring(decomposedAttack.numD3)..\"D3\")\r\n    end\r\n    if decomposedAttack.rawNum > 0 then\r\n      table.insert(accum, tostring(decomposedAttack.rawNum))\r\n    end\r\n    local s = table.concat(accum, \"+\")\r\n    if s == \"\" then\r\n      s = \"0\"\r\n    end\r\n    return s\r\n  end\r\n\r\n  function CombineAttack(a1, a2)\r\n    return ComposeAttack(DecomposeAttackStr(a1..\"+\"..a2))\r\n  end\r\n",
  "LuaScriptState": "null",
  "XmlUI": "<Defaults>\r\n  <Text fontSize = \"70\" resizeTextForBestFit = \"true\"></Text>\r\n  <Text class = \"Header\" color = \"#c4be45\" fontSize = \"70\" resizeTextForBestFit = \"false\"></Text>\r\n  <Button fontSize = \"70\" preferredWidth = \"200\" preferredHeight = \"200\"></Button>\r\n</Defaults>\r\n<VerticalLayout position = \"0 0 -50\" width = \"2250\" childForceExpandHeight = \"false\" childForceExpandWidth = \"false\" childAlignment = \"MiddleCenter\">\r\n  <HorizontalLayout preferredHeight = \"100\" childForceExpandHeight = \"false\" childForceExpandWidth = \"false\">\r\n    <Button fontSize = \"60\" preferredWidth = \"1425\" preferredHeight = \"100\" onClick = \"onCountClicked\">Show weapon stats</Button>\r\n    <InputField fontSize = \"60\" preferredWidth = \"725\" preferredHeight = \"100\" characterValidation = \"Integer\" textAlignment = \"MiddleCenter\" placeholder = \"Enter range to draw it\" onEndEdit = \"onShowRangeEditEnd\"></InputField>\r\n    <Button fontSize = \"60\" preferredWidth = \"300\" preferredHeight = \"100\" onClick = \"onCleanClicked\">Clean</Button>\r\n  </HorizontalLayout>\r\n  <TableLayout preferredHeight = \"150\" preferredWidth = \"2250\" columnWidths = \"600 800 200 350 350\" rowBackgroundColor = \"#888888\" >\r\n    <Row preferredHeight = \"130\">\r\n      <Cell><Text class = \"Header\">Name</Text></Cell>\r\n      <Cell><Text class = \"Header\">Stats</Text></Cell>\r\n      <Cell><Text class = \"Header\">Count</Text></Cell>\r\n      <Cell><Text class = \"Header\">Attacks</Text></Cell>\r\n      <Cell><Text class = \"Header\">Range</Text></Cell>\r\n    </Row>\r\n  </TableLayout>\r\n  <TableLayout preferredHeight = \"150\" preferredWidth = \"2250\" columnWidths = \"600 800 200 350 350\" rowBackgroundColor = \"#CCCCCC\">\r\n  </TableLayout>\r\n</VerticalLayout>"
}
