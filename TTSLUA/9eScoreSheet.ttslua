-- FTC-GUID: 06d627

startGameObj = getObjectFromGUID(Global.getVar("startMenu_GUID"))
inputBox={}
inputBox[1]=getObjectFromGUID(Global.getVar("redSecondaryInputBox_GUID"))
inputBox[2]=getObjectFromGUID(Global.getVar("blueSecondaryInputBox_GUID"))
currentlySelecting={}
playerCounter={}
playerCounter[1]=getObjectFromGUID(Global.getVar("redVPCounter_GUID"))
playerCounter[2]=getObjectFromGUID(Global.getVar("blueVPCounter_GUID"))

-- Button indexes
BTN_IX_PRIMARY_2 = 1
BTN_IX_PRIMARY_3 = 2
BTN_IX_PRIMARY_4 = 3
BTN_IX_PRIMARY_5 = 4
BTN_IX_MISSION = 5
BTN_IX_SECONDARIES = 6

enableBtn = { label="ENABLE\nGT\nSCORESHEET\n\n(click here)\n\nDon't enable if you\nwant to keep track\nof VPs manually\non counters ", width = 6500,	height = 9500, click_function = 'enableSheet', font_size = 1600,
		function_owner = self,	position = {1, -0.05, -1}, rotation = {0, 90, 180},	tooltip = "", color="Black", font_color="White"
}

scoresheetActive=false

-- round, player, scored
primary = {
	{{0,0,0}, {0,0,0}},
	{{0,0,0}, {0,0,0}},
	{{0,0,0}, {0,0,0}},
	{{0,0,0}, {0,0,0}}
}

-- index, name, primary, mission
mission = {0, "", "", "Click to cycle mission packs,\nright-click to cycle backwards."}

-- player1, player2
mission_score = {0, 0}

-- index, score, category, name, description
defaultSec = {0, 0, 0, "", "Click to select a secondary objective."}

-- player1, player2
secondary = {
	{defaultSec, defaultSec, defaultSec},
	{defaultSec, defaultSec, defaultSec}
}

packData = {}
selectedPackId = nil
selectedPackIndex = nil

button = {}

playerOneTitle = {
	index = 0,
	width = 3000,
	height = 500,
	label = "Player 1",
	click_function = 'p1',
	font_size = 400,
	function_owner = self,
	position = {-8, -0.05, -4.25},
	rotation = {0, 90, 180},
	tooltip = "Click to put your name here"
}
playerTwoTitle = {
	index = 1,
	width = 3000,
	height = 500,
	label = "Player 2",
	click_function = 'p2',
	font_size = 400,
	function_owner = self,
	position = {-8, -0.05, 2.25},
	rotation = {0, 90, 180},
	tooltip = "Click to put your name here"
}

playerTotal = {
	{
		index = 2,
		width = 800,
		height = 500,
		label = "10",
		click_function = 'nothing',
		font_size = 500,
		function_owner = self,
		position = {10, -0.05, -4},
		rotation = {0, 90, 180},
		tooltip = "Player 1"
	},
	{
		index = 3,
		width = 800,
		height = 500,
		label = "10",
		click_function = 'nothing',
		font_size = 500,
		function_owner = self,
		position = {10, -0.05, 2},
		rotation = {0, 90, 180},
		tooltip = "Player 2"
	}
}

packButton = {
	index = 4,
	width = 4500,
	height = 500,
	label = "",
	click_function = 'pack',
	font_size = 400,
	function_owner = self,
	position = {-6.25, -0.05, -1},
	rotation = {0, 90, 180},
	tooltip = "Click to cycle mission packs,\nright-click to cycle backwards."
}

p = 1

function enableSheet()
	scoresheetActive=true
	self.script_state = onSave()
	onload(self.script_state)
end

function addSecondaryForPlayer(params)
	local sheetParams= getParams()
	if Player[params.clicker].steam_name == sheetParams.P1 then
		for i=1, 3 do
			if button[BTN_IX_SECONDARIES][i][4].label == "" then
				sec_xyFromExternal(1, i, false, params.packID, params.name)
				return
			end
		end
		printToColor("No more space!", params.clicker, "Red")
		return
	end
	if Player[params.clicker].steam_name == sheetParams.P2 then
		for i=1, 3 do
			if button[BTN_IX_SECONDARIES][i+3][4].label == "" then
				sec_xyFromExternal(2, i, false, params.packID, params.name)
				return
			end
		end
		printToColor("No more space!", params.clicker, "Red")
		return
	end
	printToColor("Register yourself to scoresheet first!", params.clicker, "Red")
end

function sec_xyFromExternal(x, y, _, secPackId, secName)
	if selectedPackIndex ~= nil then
		local foundPackIndex = nil
		for packIndex, packId in ipairs(Global.getTable("packs").names) do
			if packId == secPackId then
				foundPackIndex = packIndex
				break
			end
		end
		if foundPackIndex == nil then
			return
		end

		local foundSecIndex = nil
		local foundSecData = nil
		for secIndex, secData in ipairs(packData[foundPackIndex].objectives) do
			if secData.name == secName then
				foundSecIndex = secIndex
				foundSecData = secData
				break
			end
		end
		if foundSecIndex == nil then
			return
		end

		secondary[x][y][1] = foundSecIndex
		secondary[x][y][3] = foundSecData.category
		secondary[x][y][4] = foundSecData.name
		secondary[x][y][5] = foundSecData.description
		checkSecondaryCategories(x)
		updateAll(true)
	end
end

function onload(save_data)
	if save_data ~= "" then
		local data = JSON.decode(save_data)
		if data then
			scoresheetActive = data.scoresheetActive
			primary = data.primary
			mission = data.mission
			mission_score = data.mission_score
			secondary = data.secondary
			selectedPackId = data.selectedPackId
		end
	end

	self.clearButtons()
	if not scoresheetActive then
		self.createButton(enableBtn)
		return
	end

	Wait.frames(function() self.setPosition({74,1,-1}) end, 1)
	self.setLock(true)

	self.createButton( playerOneTitle )
	self.createButton( playerTwoTitle )
	self.createButton( playerTotal[1] )
	self.createButton( playerTotal[2] )
	self.createButton( packButton )

	local b_xpos = 0
	local b_ypos = -3.75
	local b_index = 5

	-- Primary objective scoring buttons

	for i=BTN_IX_PRIMARY_2,BTN_IX_PRIMARY_5 do
		button[i] = {}
		b_xpos = -6.15

		for j=1,2 do
			button[i][j] = {}

			for k=1,4 do
				local newButton = {
					index = 0,
					width = 600,
					height = 600,
					label = "0",
					click_function = 'nothing',
					font_size = 500,
					function_owner = self,
					position = {0, -0.05, 0},
					rotation = {0, 90, 180},
					tooltip = "Total 0-12"
				}

				newButton.index = b_index
				b_index = b_index + 1

				newButton.position = {b_ypos, -0.05, b_xpos}
				b_xpos = b_xpos + 1.25

				if k ~= 4 then
					newButton.click_function = 'toggle_' .. i .. j .. k
					newButton.label = ""
				end

				if k == 1 then
					newButton.tooltip = "Hold 1+"
				elseif k == 2 then
					newButton.tooltip = "Hold 2+"
				elseif k == 3 then
					newButton.tooltip = "Hold More"
				end

				button[i][j][k] = newButton
				self.createButton( button[i][j][k] )
			end

			b_xpos = 0.4
		end

		b_ypos = b_ypos + 1.95
	end

	-- Mission scoring buttons

	button[BTN_IX_MISSION] = {}
	b_ypos = b_ypos - 0.1

	for i=1,2 do
		button[BTN_IX_MISSION][i] = {}

		-- Score buttons
		if i == 1 then b_xpos = -6.2 else b_xpos = 4.2 end
		local newButton = {
			index = b_index,
			width = 500,
			height = 500,
			label = "0",
			click_function = 'nothing',
			font_size = 400,
			function_owner = self,
			position = {b_ypos, -0.05, b_xpos},
			rotation = {0, 90, 180},
			tooltip = "Mission"
		}
		b_index = b_index + 1
		button[BTN_IX_MISSION][i][1] = newButton
		self.createButton(newButton)

		-- Score modification buttons
		if i == 1 then b_xpos = -5.4 else b_xpos = 3.4 end

		for j=1,2 do
			local smallButton = {
				index = b_index,
				width = 250,
				height = 250,
				label = "",
				click_function = 'nothing',
				font_size = 200,
				function_owner = self,
				position = {0, -0.05, 0},
				rotation = {0, 90, 180},
				tooltip = ""
			}
			b_index = b_index + 1

			if j == 1 then
				smallButton.position = {b_ypos - 0.25, -0.05, b_xpos}
				smallButton.label = "+"
				smallButton.click_function = 'mis_plus_' .. i
			else
				smallButton.position = {b_ypos + 0.25, -0.05, b_xpos}
				smallButton.label = "-"
				smallButton.click_function = 'mis_sub_' .. i
			end

			button[BTN_IX_MISSION][i][j+1] = smallButton
			self.createButton(smallButton)
		end
	end

	-- Mission selection button

	local nameButton = {
		index = b_index,
		width = 3800,
		height = 500,
		label = "",
		click_function = 'cycle_mission',
		font_size = 300,
		function_owner = self,
		position = {b_ypos, -0.05, -1.0},
		rotation = {0, 90, 180},
		tooltip = "Click to cycle selected mission,\nright-click to cycle backwards."
	}
	b_index = b_index + 1

	button[BTN_IX_MISSION][3] = nameButton
	self.createButton(nameButton)

	-- Secondary scoring buttons

	button[BTN_IX_SECONDARIES] = {}
	b_xpos = -1.9
	b_ypos = b_ypos + 1.95

	for i=1,6 do
		button[BTN_IX_SECONDARIES][i] = {}

		local newButton = {
			index = 0,
			width = 500,
			height = 500,
			label = "0",
			click_function = 'nothing',
			font_size = 400,
			function_owner = self,
			position = {0, -0.05, 0},
			rotation = {0, 90, 180},
			tooltip = "Secondary"
		}

		newButton.index = b_index
		b_index = b_index + 1

		newButton.position = {b_ypos, -0.05, b_xpos}

		button[BTN_IX_SECONDARIES][i][1] = newButton
		self.createButton( button[BTN_IX_SECONDARIES][i][1] )

		local ind = secIndex(i)

		for j=1,2 do
			local smallButton = {
				index = 0,
				width = 250,
				height = 250,
				label = "",
				click_function = 'nothing',
				font_size = 200,
				function_owner = self,
				position = {0, -0.05, 0},
				rotation = {0, 90, 180},
				tooltip = ""
			}

			smallButton.index = b_index
			b_index = b_index + 1

			if j == 1 then
				smallButton.position = {b_ypos - 0.25, -0.05, b_xpos - 0.75}
				smallButton.label = "+"
				smallButton.click_function = 'plus_' .. ind[1] .. ind[2]
			else
				smallButton.position = {b_ypos + 0.25, -0.05, b_xpos - 0.75}
				smallButton.label = "-"
				smallButton.click_function = 'sub_' .. ind[1] .. ind[2]
			end

			button[BTN_IX_SECONDARIES][i][j+1] = smallButton
			self.createButton( button[BTN_IX_SECONDARIES][i][j+1] )
		end

		local nameButton = {
			index = 0,
			width = 2000,
			height = 350,
			label = "",
			click_function = 'nothing',
			font_size = 180,
			function_owner = self,
			position = {0, -0.05, 0},
			rotation = {0, 90, 180},
			tooltip = "Click to cycle secondary objectives,\nright-click to cycle backwards."
		}

		nameButton.index = b_index
		b_index = b_index + 1

		nameButton.position = {b_ypos, -0.05, b_xpos - 3.1}
		nameButton.click_function = 'sec_' .. ind[1] .. ind[2]

		button[BTN_IX_SECONDARIES][i][4] = nameButton
		self.createButton( button[BTN_IX_SECONDARIES][i][4] )

		b_ypos = b_ypos + 1

		if i == 3 then
			b_ypos = b_ypos - 3
			b_xpos = 4.5
		end
	end

	Wait.time(slowUpdate, 2)
	Wait.condition(packDataReady, function() return Global.getVar("packsStatus") ~= "pending" end, 5.0, function() broadcastToAll("Timed out waiting to download objectives", "Red") end)
end

function onSave()
	local save_data = {
		scoresheetActive = scoresheetActive,
		primary = primary,
		mission = mission,
		mission_score = mission_score,
		secondary = secondary,
		selectedPackId = selectedPackId
	}
	local encoded_data = JSON.encode(save_data)
	return encoded_data
end

function onScriptingButtonDown(index, color)
	if index == 9 and color == "White" then
		updateAll(true)
		packData = {}
		selectedPackIndex = nil
		packButton.label = ""
		self.editButton( packButton )
		print("Cleared sheet.")
	end
end

keywords = {
	map = {
		A = "ᴀ",
		B = "ʙ",
		C = "ᴄ",
		D = "ᴅ",
		E = "ᴇ",
		F = "ғ",
		G = "ɢ",
		H = "ʜ",
		I = "ɪ",
		J = "ᴊ",
		K = "ᴋ",
		L = "ʟ",
		M = "ᴍ",
		N = "ɴ",
		O = "ᴏ",
		P = "ᴘ",
		Q = "ǫ",
		R = "ʀ",
		S = "s",
		T = "ᴛ",
		U = "ᴜ",
		V = "ᴠ",
		W = "ᴡ",
		X = "x",
		Y = "ʏ",
		Z = "ᴢ"
	},
	encode = function(this, str)
		if str then
			return str:gsub("%u%u%u+",
				function(s)
					return s:gsub("[A-Z]", this.map)
				end
			)
		else return "" end
	end
}

function updateAll(reset)
	local reset = false -- fix for letting FACTION SPECIFIC to be a separate pack
	for i=1,4 do
		for j=1,2 do
			local tooltip = "Hold 1+"
			if mission[3] == "Domination" then tooltip = "Hold 2+" end
			button[i][j][1].tooltip = tooltip
			self.editButton(button[i][j][1])
			tooltip = "Hold 2+"
			if mission[3] == "Domination" then tooltip = "Hold 3+" end
			button[i][j][2].tooltip = tooltip
			self.editButton(button[i][j][2])

			for k=1,3 do
				if reset then primary[i][j][k] = 0 end
				updatePrimary(i, j ,k)
			end
		end
	end

	for n=1,2 do
		if reset then mission_score[n] = 0 end
		updateMission(n)

		button[BTN_IX_MISSION][3].label = mission[2]
		button[BTN_IX_MISSION][3].tooltip = mission[4]
		self.editButton(button[BTN_IX_MISSION][3])

		for m=1,3 do
			if reset then secondary[n][m] = defaultSec end
			updateSecondary(n, m)

			local v = secondary[n][m][1]
			local l = 0

			if n == 1 then
				l = m
			else
				l = m + 3
			end

			button[BTN_IX_SECONDARIES][l][4].label = secondary[n][m][4]
			button[BTN_IX_SECONDARIES][l][4].tooltip = keywords:encode( secondary[n][m][5] )
			self.editButton( button[BTN_IX_SECONDARIES][l][4] )
		end
	end

	if not reset then
		packButton.label = packData[selectedPackIndex].name
		self.editButton( packButton )
	end
end

function slowUpdate()
	local params = getParams()

	if playerOneTitle.label ~= params.P1 then
		playerOneTitle.label = params.P1
		self.editButton(playerOneTitle)
		playerTotal[1].tooltip = params.P1
	end

	if playerTwoTitle.label ~= params.P2 then
		playerTwoTitle.label = params.P2
		self.editButton(playerTwoTitle)
		playerTotal[2].tooltip = params.P2
	end
end

function nothing()
end

function packDataReady()
    if Global.getVar("packsStatus") == "success" then
        packs = Global.getTable("packs")
		for packIndex, packId in ipairs(packs.names) do
			pack_data = packs.data[packId]
			local obj = {}
			local mis = {}

			obj[0] = {
				faction = "",
				category = "",
				name = "",
				description = "Click to select a secondary objective."
			}
			mis[0] = {
				name = "",
				primary = "",
				mission = "Click to cycle selected mission,\nright-click to cycle backwards."
			}

			local i = 1
			for _, mission in ipairs(pack_data.missions) do
				mis[i] = mission
				i = i + 1
			end

			i = 1
			for _, packFaction in ipairs(pack_data.factions) do
				for _, packCategory in ipairs(packFaction.categories) do
					for _, packObjective in ipairs(packCategory.objectives) do
						obj[i] = {
							faction = packFaction.name,
							category = packCategory.name,
							name = packObjective.name,
							description = packObjective.description
						}
						i = i + 1
					end
				end
			end

			table.insert(packData, {
				name = pack_data.name,
				missions = mis,
				objectives = obj
			})

			-- Decrement selected pack index by one because we're going to call
			-- pack() below, which simulates clicking on the mission pack and
			-- therefore moves to the _next_ one.
			if selectedPackId == packId then
				selectedPackIndex = packIndex - 1
			end
		end

		if selectedPackId == nil then
			selectedPackIndex = 0
		end

		pack(nil, nil, false)
    else
        broadcastToAll("Failed to download objectives, please check your connection.", "Red")
    end
end

function packDataTimeout()
    broadcastToAll("Timed out waiting to download objectives", "Red")
end

warned = false

function packFromExt(params)
	if not scoresheetActive then return end
	local i = params.index
	selectedPackIndex = i
	selectedPackId = Global.getTable("packs").names[selectedPackIndex]
	packButton.label = packData[i].name
	self.editButton( packButton )
	updateAll(true)
end

function pack(_, _, alt)
	if selectedPackIndex == nil then
		broadcastToAll("Mission packs not available yet, please wait.", "Yellow")
		return
	end

	if true or (warned or -- adde true for letting FACTIONS to be a separate pack
		(
			playerSum(1) == 10 and
			playerSum(2) == 10 and
			secondary[1][1][1] == 0 and
			secondary[1][2][1] == 0 and
			secondary[1][3][1] == 0 and
			secondary[2][1][1] == 0 and
			secondary[2][2][1] == 0 and
			secondary[2][3][1] == 0
		)
	)
	then
		-- Close secondary selection menus if they're open, as they're referencing
		-- a different pack to the one we're about to move to.
		inputBox[1].call("hideMenu")
		inputBox[2].call("hideMenu")
		currentlySelecting[1] = nil
		currentlySelecting[2] = nil

		local i = selectedPackIndex

		if alt then
			i = i - 1
			if i < 1 then i = #packData end
		else
			i = i + 1
			if i > #packData then i = 1 end
		end

		selectedPackIndex = i
		selectedPackId = Global.getTable("packs").names[selectedPackIndex]

		packButton.label = packData[i].name
		self.editButton( packButton )

		if string.find(packData[i].name, "Nachmund") then
			-- Nachmund missions grant one CP per battle round
			startGameObj.setVar("cpEveryTurn", false)
		else
			-- Nephilim and onwards grant one CP per player turn
			startGameObj.setVar("cpEveryTurn", true)
		end

		updateAll(true)
	else
		printToAll("WARNING: Changing mission pack will reset objectives. Click again to confirm.", {r=1,g=0,b=0})
		warned = true
		Timer.create({
			identifier     = "scorecard_warning_" .. math.random(1000000),
			function_name  = "unwarn",
			delay          = 10
		})
	end
end

function unwarn()
	warned = false
end

function plusOne(x, y, alt)
	-- Increment player X's score for secondary Y.
	-- alt is true if right-clicked, increments by 5.

	local diff = 1
	if alt then diff = 5 end

	local sec = secondary[x][y][2] + diff
	if sec > 15 then sec = 15 end

	secondary[x][y][2] = sec
	updateSecondary(x, y)
end

function subOne(x, y, alt)
	-- Decrement player X's score for secondary Y.
	-- alt is true if right-clicked, decrements by 5.

	local diff = 1
	if alt then diff = 5 end

	local sec = secondary[x][y][2] - diff
	if sec < 0 then sec = 0 end

	secondary[x][y][2] = sec
	updateSecondary(x, y)
end

function updateSecondary(x, y)
	-- Make UI/score changes as a result of player X's score for secondary Y
	-- having changed.

	-- Determine button index. Player 1 has indices 1-3, player 2 has 4-6.
	local w = 0
	if x == 1 then
		w = y
	else
		w = y + 3
	end

	-- Update the button to reflect the new score for this secondary.
	button[BTN_IX_SECONDARIES][w][1].label = tostring( secondary[x][y][2] )
	self.editButton(button[BTN_IX_SECONDARIES][w][1])

	-- Recalculate the player's score and update the corresponding button.
	playerTotal[x].label = tostring( playerSum(x) )
	self.editButton(playerTotal[x])
end

function mis_plus_1()
	misPlus(1)
end

function mis_plus_2()
	misPlus(2)
end

function misPlus(x)
	local mis = mission_score[x] + 1
	mission_score[x] = mis
	updateMission(x)
end

function mis_sub_1()
	misSub(1)
end

function mis_sub_2()
	misSub(2)
end

function misSub(x)
	local mis = mission_score[x] - 1
	if mis < 0 then mis = 0 end
	mission_score[x] = mis
	updateMission(x)
end

function updateMission(x)
	-- Make UI/score changes as a result of player X's mission score having
	-- changed.
	button[BTN_IX_MISSION][x][1].label = tostring(mission_score[x])
	self.editButton(button[BTN_IX_MISSION][x][1])

	playerTotal[x].label = tostring( playerSum(x) )
	self.editButton(playerTotal[x])
end

function toggle(value)
	if value == 1 then
		return 0
	end
	return 1
end

function toggle_other(value, other)
	if value == 1 then
		return 0
	end
	return other
end

function toggle_xyz(x, y, z)
	primary[x][y][z] = toggle( primary[x][y][z] )
	updatePrimary(x, y, z)

	if z == 1 and primary[x][y][z] == 0 then
		primary[x][y][2] = 0
		primary[x][y][3] = 0
		updatePrimary(x, y, 2)
		updatePrimary(x, y, 3)
	end
	if (z == 2 or z == 3) and primary[x][y][z] == 1 then
		primary[x][y][1] = 1
		updatePrimary(x, y, 1)
	end
end

function toggle_other_xyz(x, y, z)
	w = 3 - y
	primary[x][w][z] = toggle_other( primary[x][y][z], primary[x][w][z] )
	updatePrimary(x, w ,z)
end

function toggleToStr(value)
	if value == 1 then
		return "X"
	end
	return ""
end

function updatePrimary(x, y ,z)
	button[x][y][z].label = toggleToStr( primary[x][y][z] )
	self.editButton(button[x][y][z])

	button[x][y][4].label = tostring( battleRoundSum( primary[x][y] ) )
	self.editButton(button[x][y][4])

	playerTotal[y].label = tostring( playerSum(y) )
	self.editButton(playerTotal[y])
end

function battleRoundSum(values)
	local sum = 0

	for i = 1,3 do
		sum = sum + values[i]
	end

	return sum * 4
end

function playerSum(pId)
	local pri_sum = 0
	for j = 1,4 do
		pri_sum = pri_sum + battleRoundSum( primary[j][pId] )
	end
	pri_sum = pri_sum + mission_score[pId]
	if pri_sum > 45 then pri_sum = 45 end

	local sec_sum = 0
	for k = 1,3 do
		sec_sum = sec_sum + secondary[pId][k][2]
	end
	if sec_sum > 45 then sec_sum = 45 end

	local score = pri_sum + sec_sum + 10
	-- painted army gives +10

	if playerCounter[pId] then
		playerCounter[pId].Counter.setValue(score)
	end

	return score
end

function getParams()
	local params = JSON.decode( self.getDescription() )

	if params == nil then
		params = {
			P1 = "Player 1",
			P2 = "Player 2"
		}

		self.setDescription(JSON.encode_pretty(params))
	end

	return params
end

function secIndex(x)
	return {math.ceil(x/3), math.fmod(x-2,3)+2}
end

function p1(obj, clicker, alt)
	pName(1, obj, clicker, alt)
end
function p2(obj, clicker, alt)
	pName(2, obj, clicker, alt)
end

function pName(p, obj, clicker, alt)
	local params = getParams()

	if alt then
		if p == 1 then
			playerOneTitle.label = "Player 1"
			params.P1 = "Player 1"
		else
			playerTwoTitle.label = "Player 2"
			params.P2 = "Player 2"
		end
	else
		local playerName = Player[clicker].steam_name

		if string.len( playerName ) > 15 then
			playerName = string.sub( playerName, 1, 14 )
		end

		if p == 1 then
			playerOneTitle.label = playerName
			params.P1 = playerName
		else
			playerTwoTitle.label = playerName
			params.P2 = playerName
		end
	end

	self.editButton(playerOneTitle)
	self.editButton(playerTwoTitle)
	self.setDescription(JSON.encode_pretty(params))
end

function cycle_mission(_, _, alt)
	-- Click handler for mission selection.
	if selectedPackIndex ~= nil then
		local num_mis = -1
		local current_mission = mission[1]
		for _ in pairs(packData[selectedPackIndex].missions) do num_mis = num_mis + 1 end

		local diff = 1
		if alt then diff = -1 end

		current_mission = current_mission + diff
		if current_mission > num_mis then
			current_mission = 0
		elseif current_mission < 0 then
			current_mission = num_mis
		end

		mission[1] = current_mission
		mission_data = packData[selectedPackIndex].missions[current_mission]
		mission[2] = mission_data.name
		mission[3] = mission_data.primary
		mission[4] = mission_data.mission

		updateAll(true)
	end
end

-- Click handler for secondary buttons - launch the input box.
function sec_xy(x, y)
	if currentlySelecting[x] == y then
		-- The user has already got the input box open for this secondary,
		-- clicking it again means close it.
		inputBox[x].call("hideMenu")
		currentlySelecting[x] = nil
	elseif selectedPackIndex ~= nil then
		currentlySelecting[x] = y
		inputBox[x].call("displayMenu", {objectives = packData[selectedPackIndex].objectives, selected = secondary[x][y][1], secondary = y})
	end
end

function secondarySelected(params)
	x = params.player
	y = params.objNumber
	ix = params.secondary
	if ix == nil then ix = 0 end
	secondary[x][y][1] = ix
	secondary[x][y][3] = packData[selectedPackIndex].objectives[ix].category
	secondary[x][y][4] = packData[selectedPackIndex].objectives[ix].name
	secondary[x][y][5] = packData[selectedPackIndex].objectives[ix].description

	currentlySelecting[x] = nil

	checkSecondaryCategories(x)
	updateAll(true)
end

function checkSecondaryCategories(player)
	pColor = "Red"
	if player == 2 then
		pColor = "Blue"
	end

	if secondary[player][1][1] > 0 and secondary[player][1][3] == secondary[player][2][3] then
		broadcastToColor("Warning: " .. secondary[player][1][4] .. " is from the same category as " .. secondary[player][2][4], pColor, "Yellow")
	end
	if secondary[player][1][1] > 0 and secondary[player][1][3] == secondary[player][3][3] then
		broadcastToColor("Warning: " .. secondary[player][1][4] .. " is from the same category as " .. secondary[player][3][4], pColor, "Yellow")
	end
	if secondary[player][2][1] > 0 and secondary[player][2][3] == secondary[player][3][3] then
		broadcastToColor("Warning: " .. secondary[player][2][4] .. " is from the same category as " .. secondary[player][3][4], pColor, "Yellow")
	end
end

-- Abandon hope all ye who enter here

function toggle_111()
	toggle_xyz(1, 1, 1)
end
function toggle_112()
	toggle_xyz(1, 1, 2)
end
function toggle_113()
	toggle_xyz(1, 1, 3)
end

function toggle_121()
	toggle_xyz(1, 2, 1)
end
function toggle_122()
	toggle_xyz(1, 2, 2)
end
function toggle_123()
	toggle_xyz(1, 2, 3)
end

function toggle_211()
	toggle_xyz(2, 1, 1)
end
function toggle_212()
	toggle_xyz(2, 1, 2)
end
function toggle_213()
	toggle_xyz(2, 1, 3)
end

function toggle_221()
	toggle_xyz(2, 2, 1)
end
function toggle_222()
	toggle_xyz(2, 2, 2)
end
function toggle_223()
	toggle_xyz(2, 2, 3)
end

function toggle_311()
	toggle_xyz(3, 1, 1)
end
function toggle_312()
	toggle_xyz(3, 1, 2)
end
function toggle_313()
	toggle_xyz(3, 1, 3)
end

function toggle_321()
	toggle_xyz(3, 2, 1)
end
function toggle_322()
	toggle_xyz(3, 2, 2)
end
function toggle_323()
	toggle_xyz(3, 2, 3)
end

function toggle_411()
	toggle_xyz(4, 1, 1)
end
function toggle_412()
	toggle_xyz(4, 1, 2)
end
function toggle_413()
	toggle_xyz(4, 1, 3)
end

function toggle_421()
	toggle_xyz(4, 2, 1)
end
function toggle_422()
	toggle_xyz(4, 2, 2)
end
function toggle_423()
	toggle_xyz(4, 2, 3)
end


function plus_11(_, _, alt)
	plusOne(1, 1, alt)
end
function plus_12(_, _, alt)
	plusOne(1, 2, alt)
end
function plus_13(_, _, alt)
	plusOne(1, 3, alt)
end
function plus_21(_, _, alt)
	plusOne(2, 1, alt)
end
function plus_22(_, _, alt)
	plusOne(2, 2, alt)
end
function plus_23(_, _, alt)
	plusOne(2, 3, alt)
end

function sub_11(_, _, alt)
	subOne(1, 1, alt)
end
function sub_12(_, _, alt)
	subOne(1, 2, alt)
end
function sub_13(_, _, alt)
	subOne(1, 3, alt)
end
function sub_21(_, _, alt)
	subOne(2, 1, alt)
end
function sub_22(_, _, alt)
	subOne(2, 2, alt)
end
function sub_23(_, _, alt)
	subOne(2, 3, alt)
end

function sec_11()
	sec_xy(1, 1)
end
function sec_12()
	sec_xy(1, 2)
end
function sec_13()
	sec_xy(1, 3)
end
function sec_21()
	sec_xy(2, 1)
end
function sec_22()
	sec_xy(2, 2)
end
function sec_23()
	sec_xy(2, 3)
end
