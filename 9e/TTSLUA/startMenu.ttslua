-- FTC-GUID: 738804
-- CONTENT:
-- size changer manager
-- deploy zones manager
-- objectives manager
-- game manager

keepForTerrainEditor = true

secondaryObj_GUID = {"cff35b","471de1"}

cpCounter_GUID={"e446f7","deb9f2"}

function onLoad(saved_data)
    --testDeployRIC()
    --self.setPosition({40,-4,0})
    self.setRotation({0,270,0})
    -- load from saved
    if saved_data ~= "" then
        local loaded_data = JSON.decode(saved_data)
        gameMode = loaded_data.svgameMode
        inGame = loaded_data.svinGame
        checkEnd = loaded_data.svcheckEnd
        currentTurn = loaded_data.svcurrentTurn
        currentPhase = loaded_data.svcurrentPhase
        mapSizeSelected = loaded_data.svmapSizeSelected
        sizeConfirmed=loaded_data.svsizeConfirmed
        deployTypeSelected = loaded_data.svdeployTypeSelected
        deploySelected = loaded_data.svdeploySelected
        areaPlaced = loaded_data.svareaPlaced
        deploymentPregamePlaced = loaded_data.svdeploymentPregamePlaced
        deploymentIngamePlaced = loaded_data.svdeploymentIngamePlaced
        objectivesTypeSelected = loaded_data.svobjectivesTypeSelected
        objectivesSelected = loaded_data.svobjectivesSelected
    end

    --mapSizeSelected=2
--    objectivesTypeSelected = 4
--    objectivesSelected = #objectivesData[objectivesTypeSelected].objectivesList

--    deployTypeSelected = 8
--    deploySelected = #DeployZonesData[deployTypeSelected].zones

    --objectivesSelected=#objectivesData[sizeSelected]
    --print("objSel: "..objectivesSelected)
    mat = getObjectFromGUID(mat_GUID)
    if simulation then print("THIS IS "..currentTurn.." TURN") end
    -- DEPLOY MENU VARIABLES
    deployBag = {} -- not used
    KTitems = getObjectFromGUID(KTitemsGUID)
    if sizeData[mapSizeSelected].type == "KT" then
        phases=phasesKT
    else
        phases=phases40k
    end
    _40Kitems = getObjectFromGUID(_40KitemsGUID)

    -- REST OF CODE
    redTurnCounter = getObjectFromGUID("055302")
    blueTurnCounter = getObjectFromGUID("7e4111")
    gameTurnCounter = getObjectFromGUID("ee92cf")
    redCpCounter = getObjectFromGUID(cpCounter_GUID[1])
    blueCpCounter = getObjectFromGUID(cpCounter_GUID[2])
    if inGame == false then
        --broadcastToAll("The mod will keep track of how many times a game is started or a map is exported.\nNo other data will be sent!", "Orange")
        Notes.setNotes(notePadTxt)
    else
        Notes.setNotes("")
    end
    if deploymentIngamePlaced == true then
        deployIngameBtn.label = deployIngameLblOpen
    else
        deployIngameBtn.label = deployIngameLblClosed
    end
    if areaPlaced == true then
        areaBtn.label = areaLblOpen
    else
        areaBtn.label = areaLblClosed
    end
    if showBagsVariable then
        showBags()
    else
        Wait.frames(hideBags, 2)
    end
    gameTurnCounter.call("checkGameEnd")
    writeMenus()
    if not inGame then
        makeAnnouncement()
    end
    --KTitems.call("buttonClick_recall")
end

function onSave()
    saved_data = JSON.encode({
        svinGame = inGame,
        svgameMode = gameMode,
        svcurrentTurn = currentTurn,
        svcurrentPhase = currentPhase,
        svcheckEnd = checkEnd,
        svmapSizeSelected=mapSizeSelected,
        svsizeConfirmed=sizeConfirmed,
        svdeployTypeSelected = deployTypeSelected,
        svdeploySelected = deploySelected,
        svareaPlaced = areaPlaced,
        svdeploymentPregamePlaced = deploymentPregamePlaced,
        svdeploymentIngamePlaced = deploymentIngamePlaced,
        svobjectivesTypeSelected = objectivesTypeSelected,
        svobjectivesSelected = objectivesSelected,
    })
    --saved_data = ""
    return saved_data
end

function makeAnnouncement()
    local features={
    'Secondary Objectives now stay selected.',
    'Memory Leak resolved from Kustom Dice Roller.',
    'Keywords are now displayed in different font for readability.',
    'Terrain extractor is now fixed.',
    'Score Sheet is locked upon startup.',
    'Can swap between white/black pip dice.'
    }
    printToAll("NEW FEATURES:", "Yellow")
    for i, new in ipairs(features) do
        printToAll("- "..new, "Yellow")
    end
end

-- SIZE CHANGER MANAGER
positionValue={0,-9.52,0}
sizeData={
    {type="9th", id=1, name='C o m b a t     P a t r o l - 44" x 30"', scale={1.22,1,0.83}, defaultObjectives=0},
    {type="9th", id=2, name='I n c u r s i o n - 44" x 30"', scale={1.22,1,0.83}, defaultObjectives=0},
    {type="9th", id=3, name='S t r i k e   F o r c e - 44" x 60"', scale={0.83*2,1,1.22}, defaultObjectives=0},
    {type="9th", id=4, name='O n s l a u g h t - 44" x 90"', scale={0.83*3,1,1.22}, defaultObjectives=0},
    {type="8th", id=5, name="L e g a c y   -   4' x 4'", scale={1.33,1,1.333}, defaultObjectives=0},
    {type="8th", id=6, name="L e g a c y   -   6' x 4'", scale={2,1,1.333}, defaultObjectives=0},
    {type="8th", id=7, name="L e g a c y   -   8' x 4'", scale={2.66,1,1.333}, defaultObjectives=0},
    {type="KT",  id=8, name='K i l l     T e a m   -   30" x 20"', scale={0.83,1,0.61}, defaultObjectives=0},

}

menuSizeX = 0
menuSizeY = 5
menuSizeZ = 25
arrowOffset=9.5

mapSizeSelected=2
numberSizes=#sizeData
sizeConfirmed=false

sizeMenuBtn={
    index=1, label="S E L E C T     B A T T L E F I E L D     S I Z E", click_function="none", function_owner=self,
    position={menuSizeX, menuSizeY ,menuSizeZ-2.05}, rotation={0,0,0}, height=450, width=8000, scale = {1.3,1.3,1.3},
    font_size=300, color={0,0,0}, font_color={1,1,1}
}

sizeBtn={
    index= i, label="Zone", click_function="none", function_owner=self,
    position={-menuSizeX, menuSizeY ,menuSizeZ}, rotation={0,0,0}, height=450, width=6000,scale = {1.3,1.3,1.3},
    font_size=300, color={0.6,0.6,0.6}, font_color={0,0,0}
}
sizeUpBtn={
    index=1, label="->", click_function="sizeUp", function_owner=self,
    position={-menuSizeX+arrowOffset, menuSizeY ,menuSizeZ}, rotation={0,0,0}, height=450, width=800,scale = {1.3,1.3,1.3},
    font_size=300, color={0,0,0}, font_color={1,1,1}
}
sizeDownBtn={
    index=1, label="<-", click_function="sizeDown", function_owner=self,
    position={-menuSizeX-arrowOffset, menuSizeY ,menuSizeZ}, rotation={0,0,0}, height=450, width=800,scale = {1.3,1.3,1.3},
    font_size=300, color={0,0,0}, font_color={1,1,1}
}
confirmBtn={
    index= i, label="C O N F I R M\nFOR GAMING", click_function="confirmSizeGame", function_owner=self,
    position={-menuSizeX, menuSizeY ,menuSizeZ+3.5}, rotation={0,0,0}, height=1400, width=4400, scale = {1.3,1.3,1.3},
    font_size=500, color={0,0.7,0}, font_color={0,0,0}
}
confirmBtn2={
    index= i, label="C O N F I R M\nFOR MAP MAKING", click_function="confirmSizeTerrain", function_owner=self,
    position={-menuSizeX, menuSizeY ,menuSizeZ+7.5}, rotation={0,0,0}, height=1400, width=4400, scale = {1.3,1.3,1.3},
    font_size=500, color={0.7,0,0}, font_color={0,0,0}
}

function refreshMat()
    mat = getObjectFromGUID("4ee1f2")
end

function writeSizeMenu()
    self.clearButtons()
    if sizeConfirmed then
        return
    end
    self.createButton(sizeMenuBtn)
    --sizeBtn.label=sizeName[sizeSelected]
    sizeBtn.label=sizeData[mapSizeSelected].name
    self.createButton(sizeBtn)
    self.createButton(sizeUpBtn)
    self.createButton(sizeDownBtn)
    self.createButton(confirmBtn)
    self.createButton(confirmBtn2)
    mat.setScale(sizeData[mapSizeSelected].scale)
    mat.setPosition(positionValue)
end

function sizeUp()
    sizeUpDown(1)
end

function sizeDown()
    sizeUpDown(-1)
end

function sizeUpDown(increment)
    mapSizeSelected=mapSizeSelected+increment
    if mapSizeSelected > #sizeData then
        mapSizeSelected=1
    end
    if mapSizeSelected < 1 then
        mapSizeSelected=#sizeData
    end
    updateDeployObjectivesSelection()
    deployTypeUpDown(nil)
    writeMenus()
end

function confirmSizeGame()
    confirmSizeMat("game")
end

function confirmSizeTerrain()
    confirmSizeMat("terrain")
end

function confirmSizeMat(type)
    gameMode= type
    sizeConfirmed=true
    mat.setScale(sizeData[mapSizeSelected].scale)
    if sizeData[mapSizeSelected].type == "KT" then
        KTitems.call("buttonClick_place")
        phases=phasesKT
    else
        phases=phases40k
    end
    --updateDeployObjectivesSelection()
    self.setRotation({0,270,0})
    writeMenus()
    if gameMode == "game" then
    end
    if gameMode == "terrain" then
        switchToTerrainEditor()
    end
end

function updateDeployObjectivesSelection()
    for i, deploy in ipairs(DeployZonesData) do
        if deploy.id == sizeData[mapSizeSelected].id then
            deployTypeSelected = i
        end
    end
    for i, objectives in ipairs(objectivesData) do
        if objectives.id == sizeData[mapSizeSelected].id then
            objectivesTypeSelected = i
            --printToAll("Obj type id/i".. objectives.id.."/"..i, "Orange")
        end
    end
    deploySelected = #DeployZonesData[deployTypeSelected].zones
    objectivesSelected = #objectivesData[objectivesTypeSelected].objectivesList
end

function switchToTerrainEditor()
    printToAll("Deleting unnecessary things.\nPLEASE WAIT..", "Yellow")
    local pos={}
    for i, obj in ipairs(getAllObjects()) do
        pos=obj.getPosition()
        if ((pos.y > -8 and pos.y < 0.36) or pos.y > 0.71) and not obj.getVar("keepForTerrainEditor") then
            obj.destroy()
            --print("Deleting "..obj.getName())
        else
            --print("KEEP "..obj.getName().."  "..pos.y)
        end
    end
    printToAll("DONE!", "Yellow")
end
-- END size changer

-- DEPLOY ZONES MANAGER
DeployZonesData = {
    {  id=5 , type = "Legacy 4x4",  objectivesID = 5 ,
    zones={
        {name = "#1 4x4 Spearhead Assault", draw = {--[[1]]{type = "arrow", color="Teal", position = "x", fromCenter = 9, fromEdge = 12, wide=0},--[[2]]{type = "arrow", color="Red", position = "-x", fromCenter = 9, fromEdge = 12, wide=0}}},
        {name = "#2 4x4 Dawn of War", draw = {--[[1]]{type = "line", color = "Teal", position = "-z", fromCenter = 12},--[[2]]{type = "line", color = "Red", position = "z", fromCenter = 12}}},
        {name = "#3 4x4 Search and Destroy", draw = {--[[1]]{type = "quarter", color = "Teal", position = "x-z", fromCenter = 9},--[[2]]{type = "quarter", color = "Red", position = "-xz", fromCenter = 9},--[[3]]{type = "circle", color = "White", fromCenter = 9}}},
        {name = "#4 4x4 Hammer and Hanvil", draw = {--[[1]]{type = "line", color = "Teal", position = "x", fromCenter = 12},--[[2]]{type = "line", color = "Red", position = "-x", fromCenter = 12}}},
        {name = "#5 4x4 Front-Line Assault", draw = {--[[1]]{type = "arrow", color="Teal", position = "-z", fromCenter = 9, fromEdge = 6, wide=0},--[[2]]{type = "arrow", color="Red", position = "z", fromCenter = 9, fromEdge = 6, wide=0}}},
        {name = "#6 4x4 Vanguard Strike", draw = {--[[1]]{type = "diagonal", color = "Teal", position = "z" , fromCenter = 12},--[[1]]{type = "diagonal", color = "Red", position = "-z" , fromCenter = 12}}},
        {name = "None", draw = {type = "none"}},
        }
    },

{ id=6 , type = "Legacy 6x4",  objectivesID = 5 ,
    zones={
        {name = "#1 6x4 Spearhead Assault", draw = {--[[1]]{type = "arrow", color="Teal", position = "x", fromCenter = 9, fromEdge = 12, wide=0},--[[2]]{type = "arrow", color="Red", position = "-x", fromCenter = 9, fromEdge = 12, wide=0}}},
        {name = "#2 6x4 Dawn of War", draw = {--[[1]]{type = "line", color = "Teal", position = "-z", fromCenter = 12 },--[[2]]{type = "line", color = "Red", position = "z", fromCenter = 12, fromEdge = 0}}},
        {name = "#3 6x4 Search and Destroy", draw = {--[[1]]{type = "quarter", color = "Teal", position = "x-z", fromCenter = 9},--[[2]]{type = "quarter", color = "Red", position = "-xz", fromCenter = 9},--[[3]]{type = "circle", color = "White", fromCenter = 9}}},
        {name = "#4 6x4 Hammer and Hanvil", draw = {--[[1]]{type = "line", color = "Teal", position = "x", fromCenter = 12},--[[2]]{type = "line", color = "Red", position = "-x", fromCenter = 12}}},
        {name = "#5 6x4 Front-Line Assault", draw = {--[[1]]{type = "arrow", color="Teal", position = "-z", fromCenter = 9, fromEdge = 6, wide=0},--[[2]]{type = "arrow", color="Red", position = "z", fromCenter = 9, fromEdge = 6, wide=0}}},
        {name = "#6 6x4 Vanguard Strike", draw = {--[[1]]{type = "diagonal", color = "Teal", position = "z" , fromCenter = 12},--[[1]]{type = "diagonal", color = "Red", position = "-z" , fromCenter = 12}}},
        {name = "None", draw = {type = "none"}},
        }
    },
{ id=7 , type = "Legacy 8x4",  objectivesID = 5 ,
    zones={
        {name = "#1 8x4 Spearhead Assault", draw = {--[[1]]{type = "arrow", color="Teal", position = "x", fromCenter = 9, fromEdge = 12, wide=0},--[[2]]{type = "arrow", color="Red", position = "-x", fromCenter = 9, fromEdge = 12, wide=0}}},
        {name = "#2 8x4 Dawn of War", draw = {--[[1]]{type = "line", color = "Teal", position = "-z", fromCenter = 12},--[[2]]{type = "line", color = "Red", position = "z", fromCenter = 12}}},
        {name = "#3 8x4 Search and Destroy", draw = {--[[1]]{type = "quarter", color = "Teal", position = "x-z", fromCenter = 9},--[[2]]{type = "quarter", color = "Red", position = "-xz", fromCenter = 9},--[[3]]{type = "circle", color = "White", fromCenter = 9}}},
        {name = "#4 8x4 Hammer and Hanvil", draw = {--[[1]]{type = "line", color = "Teal", position = "x", fromCenter = 12},--[[2]]{type = "line", color = "Red", position = "-x", fromCenter = 12}}},
        {name = "#5 8x4 Front-Line Assault", draw = {--[[1]]{type = "arrow", color="Teal", position = "-z", fromCenter = 9, fromEdge = 6, wide=0},--[[2]]{type = "arrow", color="Red", position = "z", fromCenter = 9, fromEdge = 6, wide=0}}},
        {name = "#6 8x4 Vanguard Strike", draw = {--[[1]]{type = "diagonal", color = "Teal", position = "z" , fromCenter = 12},--[[1]]{type = "diagonal", color = "Red", position = "-z" , fromCenter = 12}}},
        {name = "None", draw = {type = "none"}},
        }
    },
{ id=8 ,  type = "Kill Team",  objectivesID = -1,
    zones={
        {name = "#1 KT Sweep and Clear", draw = {--[[1]]{type = "quarter", color = "Teal", position = "x-z", fromCenter = 5,},--[[2]]{type = "quarter", color = "Red", position = "-xz", fromCenter = 5, },--[[3]]{type = "circle", color = "White", fromCenter = 5}}},
        {name = "#2 KT Take Prisoners", draw = {--[[1]]{type = "quarter", color = "Teal", position = "x-z", fromCenter = 6,},--[[2]]{type = "quarter", color = "Red", position = "-xz", fromCenter = 6, },--[[3]]{type = "circle", color = "White", fromCenter = 6}}},
        {name = "#3 KT Recover Intelligence", draw = {--[[1]]{type = "arrow", color="Teal", position = "-z", fromCenter = 5, fromEdge = 0, wide=6},--[[2]]{type = "arrow", color="Red", position = "z", fromCenter = 5, fromEdge = 0, wide=6}}},
        {name = "#4 KT Terror Tactics", draw = {--[[1]]{type = "rectangle", color="Teal", position = "x", fromCenter = 6, wide=6},--[[2]]{type = "rectangle", color="Red", position = "-x", fromCenter = 6, wide=6}}},
        {name = "None", draw = {type = "none"}},
    }
},
{id=0 ,  type = "Open Hostility",
    zones={
        {name = "OH #1 Annihilation",  objectivesID= 0, draw = {--[[1]]{type = "quarter", color = "Teal", position = "-x-z", fromCenter = 10},--[[2]]{type = "quarter", color = "Red", position = "xz", fromCenter = 10},--[[3]]{type = "circle", color = "White", fromCenter = 10}}},
        {name = "OH #2 Hold at all Costs", objectivesID= 0, draw = {--[[1]]{type = "line", color = "Teal", position = "x", fromCenter = 5 },--[[1]]{type = "line", color = "Teal", position = "-x", fromCenter = 5 },--[[2]]{type = "line", color = "Red", position = "x", fromCenter = 17, fromEdge = 0},{type = "line", color = "Red", position = "-x", fromCenter = 17, fromEdge = 0}}},
        {name = "OH #3 Pathway to Glory", objectivesID= 0, draw = {--[[1]]{type = "line", color = "Teal", position = "x", fromCenter = 12 },--[[2]]{type = "line", color = "Red", position = "-x", fromCenter = 12, fromEdge = 0}}},

        {name = "None", draw = {type = "none"}},
    }
},
{ id=1 , type = "Combat Patrol",
    zones={
        {name = "EW #1 Incisive attack", objectivesID= 1, draw = {--[[1]]{type = "line", color = "Teal", position = "x", fromCenter = 12},--[[2]]{type = "line", color = "Red", position = "-x", fromCenter = 12}}},
        {name = "EW #2 Outriders", objectivesID= 2, draw = {--[[1]]{type = "quarter", color = "Teal", position = "xz", fromCenter = 9},--[[2]]{type = "quarter", color = "Red", position = "-x-z", fromCenter = 9},--[[3]]{type = "circle", color = "White", fromCenter = 9}}},
        {name = "EW #3 Encircle", objectivesID= 3, draw = {--[[1]]{type = "corner", color="Teal", position = "z", fromCenter = 9, wide=6},--[[2]]{type = "corner", color="Red", position = "-z", fromCenter = 9,  wide=6}}},
        {name = "Cr #1 Sweep and Clear", objectivesID= 4, draw = {--[[1]]{type = "line", color = "Teal", position = "x", fromCenter = 12},--[[2]]{type = "line", color = "Red", position = "-x", fromCenter = 12},--[[3]]{type = "line", color = "Black", position = "x", fromCenter = 3},--[[4]]{type = "line", color = "Black", position = "-x", fromCenter = 3}}},
        {name = "Cr #2 Supply drop", objectivesID= 5, draw = {--[[1]]{type = "line", color = "Teal", position = "-z", fromCenter = 10},--[[2]]{type = "line", color = "Red", position = "z", fromCenter = 10},--[[3]]{type = "circle", color = "White", fromCenter = 6}}},
        {name = "Cr #3 Assassinate", objectivesID= 0, draw = {--[[1]]{type = "line", color = "Teal", position = "x", fromCenter = 0},--[[2]]{type = "line", color = "Red", position = "-x", fromCenter = 10},--[[3]]{type = "circleInZone", color = "Teal", position = "x", fromCenter = 6, deployFromCenter=0}}},
        {name = "None", draw = {type = "none"}},
    }
},
{ id=2 , type = "Incursion",
    zones={
        {name = "EW #1 Divide and Conquer", objectivesID= 1, draw = {--[[1]]{type = "line", color="Teal", position = "x", fromCenter = 12},--[[2]]{type = "line", color="Red", position = "-x", fromCenter = 12}}},
        {name = "EW #2 Crossfire",  objectivesID= 2, draw = {--[[1]]{type = "quarter", color = "Teal", position = "-x-z", fromCenter = 9},--[[2]]{type = "quarter", color = "Red", position = "xz", fromCenter = 9},--[[3]]{type = "circle", color = "White", fromCenter = 9}}},
        {name = "EW #3 Centre Ground",  objectivesID= 3, draw = {--[[1]]{type = "triangle", color = "Teal", position = "x"},--[[2]]{type = "triangle", color = "Red", position = "-x"}}},
        {name = "EW #4 Forward Push", objectivesID= 4, draw = {--[[1]]{type = "line", color = "Teal", position = "x", fromCenter = 12},--[[2]]{type = "line", color = "Red", position = "-x", fromCenter = 12}}},
        {name = "EW #5 Ransack", objectivesID= 5, draw = {--[[1]]{type = "line", color = "Teal", position = "z", fromCenter = 9},--[[2]]{type = "line", color = "Red", position = "-z", fromCenter = 9}}},
        {name = "EW #6 Shifting Front", objectivesID= 6, draw = {--[[1]]{type = "line", color = "Teal", position = "z", fromCenter = 9},--[[2]]{type = "line", color = "Red", position = "-z", fromCenter = 9}}},

        {name = "GT20 #11 Crossfire",  objectivesID= 12, draw = {--[[1]]{type = "quarter", color = "Teal", position = "-x-z", fromCenter = 9},--[[2]]{type = "quarter", color = "Red", position = "xz", fromCenter = 9},--[[3]]{type = "circle", color = "White", fromCenter = 9}}},
        {name = "GT20 #12 Resupply", objectivesID= 13, draw = {--[[1]]{type = "line", color = "Teal", position = "z", fromCenter = 9},--[[2]]{type = "line", color = "Red", position = "-z", fromCenter = 9}}},
        {name = "GT20 #13 Raid", objectivesID= 14, draw = {--[[1]]{type = "line", color = "Teal", position = "x", fromCenter = 12},--[[2]]{type = "line", color = "Red", position = "-x", fromCenter = 12}}},
        {name = "GT20 #21 Centre Ground",  objectivesID= 15, draw = {--[[1]]{type = "triangle", color = "Teal", position = "x"},--[[2]]{type = "triangle", color = "Red", position = "-x"}}},
        {name = "GT20 #22 Ascension", objectivesID= 16, draw = {--[[1]]{type = "line", color = "Teal", position = "-z", fromCenter = 9},--[[2]]{type = "line", color = "Red", position = "z", fromCenter = 9}}},
        {name = "GT20 #23 Forward Push", objectivesID= 17, draw = {--[[1]]{type = "line", color = "Teal", position = "x", fromCenter = 12},--[[2]]{type = "line", color = "Red", position = "-x", fromCenter = 12}}},
        {name = "GT20 #31 Rise of the Machine Spirit",  objectivesID= 18, draw = {--[[1]]{type = "quarter", color = "Teal", position = "-x-z", fromCenter = 9},--[[2]]{type = "quarter", color = "Red", position = "xz", fromCenter = 9},--[[3]]{type = "circle", color = "White", fromCenter = 9}}},
        {name = "GT20 #32 Show of Force", objectivesID= 19, draw = {--[[1]]{type = "line", color = "Teal", position = "x", fromCenter = 12},--[[2]]{type = "line", color = "Red", position = "-x", fromCenter = 12}}},
        {name = "GT20 #33 Reconaissance Mission",  objectivesID= 20, draw = {--[[1]]{type = "quarter", color = "Teal", position = "-x-z", fromCenter = 9},--[[2]]{type = "quarter", color = "Red", position = "xz", fromCenter = 9},--[[3]]{type = "circle", color = "White", fromCenter = 9}}},


        {name = "Cr #1 Supply Cache", objectivesID= 7, draw = {--[[1]]{type = "line", color = "Teal", position = "-z", fromCenter = 10},--[[2]]{type = "line", color = "Red", position = "z", fromCenter = 10}}},
        {name = "Cr #2 The Relic", objectivesID= 8, draw = {--[[1]]{type = "line", color = "Teal", position = "x", fromCenter = 12},--[[2]]{type = "line", color = "Red", position = "-x", fromCenter = 12},--[[3]]{type = "circle", color = "White", fromCenter = 6}}},
        {name = "Cr #3 Sabotage", objectivesID= 9, draw = {--[[1]]{type = "line", color = "Teal", position = "x", fromCenter = 0},--[[2]]{type = "line", color = "Red", position = "-x", fromCenter = 9}}},
        {name = "Cr #4 Reckon Patrol", objectivesID= 10, draw = {--[[1]]{type = "quarter", color = "Teal", position = "-x-z", fromCenter = 10},--[[2]]{type = "quarter", color = "Red", position = "xz", fromCenter = 10},--[[3]]{type = "circle", color = "White", fromCenter = 10}}},
        {name = "Cr #5 The Ritual", objectivesID= 11, draw = {--[[1]]{type = "line", color = "Teal", position = "x", fromCenter = 0},--[[2]]{type = "line", color = "Red", position = "-x", fromCenter = 12},--[[3]]{type = "circleInZone", color = "Teal", position = "x", fromCenter = 3, deployFromCenter=0}}},
        {name = "Cr #6 Behind Enemy Lines", objectivesID= 0, draw = {--[[1]]{type = "line", color = "Teal", position = "-z", fromCenter = 10},--[[2]]{type = "line", color = "Red", position = "z", fromCenter = 10}}},

        {name = "None", draw = {type = "none"}},
    }
},
{ id=3 , type = "Strike force",
    zones={
        {name = "EW #1 Retrieval Mission", objectivesID= 1, draw = {--[[1]]{type = "line", color = "Teal", position = "x", fromCenter = 12 },--[[2]]{type = "line", color = "Red", position = "-x", fromCenter = 12, fromEdge = 0},--[[3{type = "circle", color = "White", fromCenter = 12}]]}},
        {name = "EW #2 Front-line Warfare", objectivesID= 2, draw = {--[[1]]{type = "line", color = "Teal", position = "-z", fromCenter = 12 },--[[2]]{type = "line", color = "Red", position = "z", fromCenter = 12, fromEdge = 0}}},
        {name = "EW #3 The Four Pillars",  objectivesID= 3, draw = {--[[1]]{type = "quarter", color = "Teal", position = "-x-z", fromCenter = 9},--[[2]]{type = "quarter", color = "Red", position = "xz", fromCenter = 9},--[[3]]{type = "circle", color = "White", fromCenter = 9}}},
        {name = "EW #4 No Man's Land", objectivesID= 4, draw = {--[[1]]{type = "line", color = "Teal", position = "x", fromCenter = 12 },--[[2]]{type = "line", color = "Red", position = "-x", fromCenter = 12, fromEdge = 0}}},
        {name = "EW #5 Scorched Earth", objectivesID= 5, draw = {--[[1]]{type = "line", color = "Teal", position = "-z", fromCenter = 12 },--[[2]]{type = "line", color = "Red", position = "z", fromCenter = 12, fromEdge = 0}}},
        {name = "EW #6 Vital Intelligence", objectivesID= 6,draw = {--[[1]]{type = "diagonal", color = "Teal", position = "-z" , fromCenter = 12},--[[1]]{type = "diagonal", color = "Red", position = "z" , fromCenter = 12}}},

        {name = "GT20 #11 Retrieval Mission", objectivesID= 12, draw = {--[[1]]{type = "line", color = "Teal", position = "x", fromCenter = 12 },--[[2]]{type = "line", color = "Red", position = "-x", fromCenter = 12, fromEdge = 0},--[[3{type = "circle", color = "White", fromCenter = 12}]]}},
        {name = "GT20 #12 Scorched Earth", objectivesID= 13, draw = {--[[1]]{type = "line", color = "Teal", position = "-z", fromCenter = 12 },--[[2]]{type = "line", color = "Red", position = "z", fromCenter = 12, fromEdge = 0}}},
        {name = "GT20 #13 Vital Intelligence", objectivesID= 14,draw = {--[[1]]{type = "diagonal", color = "Teal", position = "-z" , fromCenter = 12},--[[1]]{type = "diagonal", color = "Red", position = "z" , fromCenter = 12}}},
        {name = "GT20 #21 Surround and Destroy", objectivesID= 15, draw = {--[[1]]{type = "line", color = "Teal", position = "-z", fromCenter = 12 },--[[2]]{type = "line", color = "Red", position = "z", fromCenter = 12, fromEdge = 0}}},
        {name = "GT20 #22 Battle Lines", objectivesID= 16, draw = {--[[1]]{type = "line", color = "Teal", position = "x", fromCenter = 12 },--[[2]]{type = "line", color = "Red", position = "-x", fromCenter = 12, fromEdge = 0}}},
        {name = "GT20 #23 The Scouring", objectivesID= 17, draw = {--[[1]]{type = "rectangle", color="Teal", position = "x", fromCenter = 14, wide=14},--[[2]]{type = "rectangle", color="Red", position = "-x", fromCenter = 14, wide=14}}},
        {name = "GT20 #31 Overrun", objectivesID= 18, draw = {--[[1]]{type = "line", color = "Teal", position = "-z", fromCenter = 12 },--[[2]]{type = "line", color = "Red", position = "z", fromCenter = 12, fromEdge = 0}}},
        {name = "GT20 #32 Sweep and Clear",  objectivesID= 19, draw = {--[[1]]{type = "quarter", color = "Teal", position = "-x-z", fromCenter = 9},--[[2]]{type = "quarter", color = "Red", position = "xz", fromCenter = 9},--[[3]]{type = "circle", color = "White", fromCenter = 9}}},
        {name = "GT20 #33 Priority Target",  objectivesID= 20, draw = {--[[1]]{type = "triangle", color = "Teal", position = "x"},--[[2]]{type = "triangle", color = "Red", position = "-x"}}},



        {name = "Cr #1 Supplies from Above", objectivesID= 7, draw = {--[[1]]{type = "line", color = "Teal", position = "-z", fromCenter = 12 },--[[2]]{type = "line", color = "Red", position = "z", fromCenter = 12, fromEdge = 0}}},
        {name = "Cr #2 Narrow the Search", objectivesID= 8, draw = {--[[1]]{type = "line", color = "Teal", position = "x", fromCenter = 12},--[[2]]{type = "line", color = "Red", position = "-x", fromCenter = 12},--[[3]]{type = "circle", color = "White", fromCenter = 12},--[[4]]{type = "circle", color = "White", fromCenter = 18}}},
        {name = "Cr #3 Cut off the Head",  objectivesID= 9, draw = {--[[1]]{type = "quarter", color = "Teal", position = "-x-z", fromCenter = 12},--[[2]]{type = "quarter", color = "Red", position = "xz", fromCenter = 12},--[[3]]{type = "circle", color = "White", fromCenter = 12}}},
        {name = "Cr #4 Retrieval", objectivesID= 10, draw = {--[[1]]{type = "line", color = "Teal", position = "-z", fromCenter = 12 },--[[2]]{type = "line", color = "Red", position = "z", fromCenter = 0, fromEdge = 0}}},
        {name = "Cr #5 Raze and Ruin", objectivesID= 11, draw = {--[[1]]{type = "line", color = "Teal", position = "-z", fromCenter = 12 },--[[2]]{type = "line", color = "Red", position = "z", fromCenter = 12, fromEdge = 0},--[[2]]{type = "line", color = "Black", position = "z", fromCenter = 3, fromEdge = 0},{type = "line", color = "Black", position = "-z", fromCenter = 3, fromEdge = 0}}},
        {name = "Cr #6 Ambush", objectivesID= 0, draw = {--[[1]]{type = "line", color = "Teal", position = "-z", fromCenter = 5 },--[[2]]{type = "line", color = "Teal", position = "z", fromCenter = 5, fromEdge = 0},{type = "line", color = "Red", position = "z", fromCenter = 17, fromEdge = 0},{type = "line", color = "Red", position = "-z", fromCenter = 17, fromEdge = 0}}},

        {name = "None", draw = {type = "none"}},
    }
},
{id=4 ,  type = "Onslaught",
    zones={
        {name = "EW #1 Lines of Battle",  objectivesID= 1, draw = {--[[1]]{type = "quarter", color = "Teal", position = "-x-z", fromCenter = 12},--[[2]]{type = "quarter", color = "Red", position = "xz", fromCenter = 12},--[[3]]{type = "circle", color = "White", fromCenter = 12}}},
        {name = "EW #2 All-out War", objectivesID= 2, draw = {--[[1]]{type = "line", color = "Teal", position = "-z", fromCenter = 12 },--[[2]]{type = "line", color = "Red", position = "z", fromCenter = 12, fromEdge = 0}}},
        {name = "EW #3 Pathway to Glory", objectivesID= 3, draw = {--[[1]]{type = "line", color = "Teal", position = "x", fromCenter = 12 },--[[2]]{type = "line", color = "Red", position = "-x", fromCenter = 12, fromEdge = 0},--[[3]]{type = "circle", color = "White", fromCenter = 12}}},


        {name = "Cr #1 Firestorm", objectivesID= 0, draw = {--[[1]]{type = "line", color = "Teal", position = "-z", fromCenter = 12 },--[[2]]{type = "line", color = "Red", position = "z", fromCenter = 12, fromEdge = 0}}},
        {name = "Cr #2 Grand assault", objectivesID= 4, draw = {--[[1]]{type = "line", color = "Teal", position = "-z", fromCenter = 0 },--[[2]]{type = "line", color = "Red", position = "z", fromCenter = 12, fromEdge = 0}}},
        {name = "Cr #3 Field of Glory", objectivesID= 5, draw = {--[[1]]{type = "line", color = "Teal", position = "x", fromCenter = 12},--[[2]]{type = "line", color = "Red", position = "-x", fromCenter = 12}}},
        {name = "None", draw = {type = "none"}},
    }
},
}



deployLineHeight = 2.1
deployLineYPos = deployLineHeight-0.1
mat_GUID = "4ee1f2"
centerCircle_GUID="51ee2f"
sizeMulti = 36

function drawDeployZone(zone)
    local drawDataZone = zone.draw
    for i, drawData in ipairs(drawDataZone) do
        if drawData.type == "arrow" then
            drawArrow(drawData)
        end
        if drawData.type == "line" then
            drawLine(drawData)
        end
        if drawData.type == "quarter" then
            drawQuarter(drawData)
        end
        if drawData.type == "diagonal" then
            drawDiagonal(drawData)
        end
        if drawData.type == "rectangle" then
            drawRectangle(drawData)
        end
        if drawData.type == "corner" then
            drawCorner(drawData)
        end
        if drawData.type == "triangle" then
            drawTriangle(drawData)
        end
        if drawData.type == "circle" then
            drawCircle(drawData, "deployZone")
        end
        if drawData.type == "circleInZone" then
            drawCircleInZone(drawData, "deployZone")
        end
    end
    setDeployHeight()
end

function setDeployHeight()
    local pos = {0,0,0}
    local found_GUID = {}
    for i, obj in ipairs(getAllObjects()) do
        if obj.getGMNotes() == "deployZone" then
            table.insert(found_GUID, #found_GUID+1, obj.getGUID())
        end
    end
    local found= nil
    for j, guid in ipairs(found_GUID) do
        found=getObjectFromGUID(guid)
        pos = found.getPosition()
        found.setPosition({pos[1], defaultDeployHeight+ deployOffset, pos[3]})
    end
end


function drawRectangle(drawData)
    local mat = getObjectFromGUID(mat_GUID)
    local linePosL = {x = 0, y = deployLineYPos, z = 0}
    local lineRotL = {x = 0, y = 90, z = 0}
    local lineScaleL = {x = 5, y = deployLineHeight, z = 0.02}
    local linePosS1 = {x = 0, y = deployLineYPos, z = 0}
    local lineRotS1 = {x = 0, y = 0, z = 0}
    local lineScaleS1 = {x = 5, y = deployLineHeight, z = 0.02}
    local linePosS2 = {x = 0, y = deployLineYPos, z = 0}
    local mapBase = mat.getScale().z * sizeMulti --short edge
    local mapHeight = mat.getScale().x * sizeMulti --long edge
    if drawData.position == "z" or drawData.position == "-z" then
        mapBase = mat.getScale().x * sizeMulti
        mapHeight = mat.getScale().z * sizeMulti
    end
    if drawData.wide ~= 0 then
        mapBase = drawData.wide * 2
    end

    lineScaleL.x = drawData.wide * 2
    linePosL.x = drawData.fromCenter

    lineScaleS1.x = (mapHeight/2)-drawData.fromCenter
    linePosS1.x = drawData.fromCenter + ((mapHeight/2) - drawData.fromCenter)/2
    linePosS1.z = drawData.wide

    linePosS2.x = linePosS1.x
    linePosS2.z = -linePosS1.z

    if drawData.position == "x" then
        -- default values
    end
    if drawData.position == "-x" then
            linePosL.x = - linePosL.x
            linePosS2.x = -linePosS2.x
            linePosS1.x = -linePosS1.x
    end
    if drawData.position == "z" then
        linePosL.z = linePosL.x
        linePosL.x = 0
        lineRotL.y = 0

        local tmp = linePosS1.z
        linePosS1.z = linePosS1.x
        linePosS1.x = tmp
        lineRotS1.y = 90

        linePosS2.z = linePosS1.z
        linePosS2.x = -tmp

    end
    if drawData.position == "-z" then
        linePosL.z = -linePosL.x
        linePosL.x = 0
        lineRotL.y = 0

        local tmp = linePosS1.z
        linePosS1.z = -linePosS1.x
        linePosS1.x = -tmp
        lineRotS1.y = 90

        linePosS2.z = linePosS1.z
        linePosS2.x = tmp

    end
    spawnLine(linePosL, lineRotL, lineScaleL, drawData.color, "deployZone") -- orizz
    spawnLine(linePosS1, lineRotS1, lineScaleS1, drawData.color,  "deployZone") -- vert1
    spawnLine(linePosS2, lineRotS1, lineScaleS1, drawData.color, "deployZone") -- vert2
end

function drawCorner(drawData)
    local mat = getObjectFromGUID(mat_GUID)
    local linePosL = {x = 0, y = deployLineYPos, z = 0}
    local lineRotL = {x = 0, y = 0, z = 0}
    local lineScaleL = {x = 5, y = deployLineHeight, z = 0.02}
    local linePosS1 = {x = 0, y = deployLineYPos, z = 0}
    local lineRotS1 = {x = 0, y = 90, z = 0}
    local lineScaleS1 = {x = 5, y = deployLineHeight, z = 0.02}
    local mapBase = mat.getScale().z * sizeMulti --short edge
    local mapHeight = mat.getScale().x * sizeMulti --long edge
    if drawData.position == "x" or drawData.position == "-x" then
        mapBase = mat.getScale().x * sizeMulti
        mapHeight = mat.getScale().z * sizeMulti
    end
    --print("MAP BxH: "..mapBase.." x "..mapHeight)
    lineScaleL.x = (mapHeight/2) + drawData.wide
    linePosL.x = (mapHeight/4)-(drawData.wide/2)
    linePosL.z = drawData.fromCenter

    lineScaleS1.x = (mapBase/2)-drawData.fromCenter
    linePosS1.z = drawData.fromCenter + lineScaleS1.x/2
    linePosS1.x = -drawData.wide

    if drawData.position == "z" then
        -- default values
    end
    if drawData.position == "-z" then
            linePosL.x = - linePosL.x
            linePosL.z = - linePosL.z

            linePosS1.z = -linePosS1.z
            linePosS1.x = -linePosS1.x
    end
    if drawData.position == "x" then -- not valid, to do
        linePosL.z = linePosL.x
        linePosL.x = 0
        lineRotL.y = 0

        local tmp = linePosS1.z
        linePosS1.z = linePosS1.x
        linePosS1.x = tmp
        lineRotS1.y = 90
    end
    if drawData.position == "-x" then-- not valid, to do
        linePosL.z = -linePosL.x
        linePosL.x = 0
        lineRotL.y = 0

        local tmp = linePosS1.z
        linePosS1.z = -linePosS1.x
        linePosS1.x = -tmp
        lineRotS1.y = 90
    end
    spawnLine(linePosL, lineRotL, lineScaleL, drawData.color, "deployZone") -- long
    spawnLine(linePosS1, lineRotS1, lineScaleS1, drawData.color,  "deployZone") -- short
end

function drawDiagonal(drawData)
    local mat = getObjectFromGUID(mat_GUID)
    local linePos = {x = 0, y = deployLineYPos, z = 0}
    local lineRot = {x = 0, y = 0, z = 0}
    local lineScale = {x = 5, y = deployLineHeight, z = 0.02}
    local mapBase = mat.getScale().z * sizeMulti --short edge
    local mapHeight = mat.getScale().x * sizeMulti --long edge
    if drawData.position == "x" or drawData.position == "-x" then
        mapBase = mat.getScale().x * sizeMulti
        mapHeight = mat.getScale().z * sizeMulti
    end
    local mainDiagonal = 0
    local edgeLoss = 0
    local triBase = 0 -- triangle with hypotenuse as the needed deploy line

    local edgeAngle = 0 -- angle of the line from the given map edge
    local edgeAngleRad = 0
    local halfTriBase = 0 -- triangle with hypotenuse that is half the line lenght
    local halfTriHeight = 0 -- triangle with hypotenuse that is half the line lenght
    mainDiagonal = math.sqrt(math.pow(mapBase, 2) + math.pow(mapHeight, 2))
    edgeAngleRad = math.atan(mapBase / mapHeight)
    edgeAngle = math.deg(edgeAngleRad)
    edgeLoss = drawData.fromCenter / math.cos(edgeAngleRad)
    triBase = mapBase-edgeLoss
    local ratio = triBase / mapBase
    lineScale.x = mainDiagonal * ratio
    lineRot.y = edgeAngle
    halfTriBase = lineScale.x * math.sin(edgeAngleRad) / 2
    halfTriHeight = lineScale.x * math.cos(edgeAngleRad) / 2
    linePos.x = (mapHeight/2) - (lineScale.x/2) * math.cos(edgeAngleRad)
    linePos.z = (mapBase/2) - (lineScale.x/2) * math.sin(edgeAngleRad)
    if drawData.position == "z" then -- upper right
        -- default values
    end
    if drawData.position == "-z" then
        linePos.x = - linePos.x
        linePos.z = - linePos.z
    end
    spawnLine(linePos, lineRot, lineScale, drawData.color,  "deployZone")
end

function drawTriangle(drawData)
    local mat = getObjectFromGUID(mat_GUID)
    local linePos = {x = 0, y = deployLineYPos, z = 0}
    local lineRot = {x = 0, y = 0, z = 0}
    local lineScale = {x = 5, y = deployLineHeight, z = 0.02}
    local mapBase = mat.getScale().z * sizeMulti --short edge
    local mapHeight = mat.getScale().x * sizeMulti --long edge
    if drawData.position == "z" or drawData.position == "-z" then
        mapBase = mat.getScale().x * sizeMulti
        mapHeight = mat.getScale().z * sizeMulti
    end


    local triBase = 0 -- triangle with hypotenuse as the needed deploy line
    local triHeight = 0 -- triangle with hypotenuse as the needed deploy line

    local edgeAngle = 0 -- angle of the line from the given map edge
    local edgeAngleRad = 0



    triBase = mapBase
    triHeight = mapHeight/2
    edgeAngleRad = math.atan(triBase/triHeight )
    edgeAngle = math.deg(edgeAngleRad)
    lineScale.x = math.sqrt(triBase^2+triHeight^2)
    lineRot.y = edgeAngle

    if drawData.position == "x" then
        linePos.x=mapHeight/4
        linePos.z=0
    end
    if drawData.position == "-x" then
        linePos.x=-mapHeight/4
        linePos.z=0
    end
    if drawData.position == "z" then
            lineRot.y= lineRot.y-90
        linePos.x=0
        linePos.z=mapHeight/4
    end
    if drawData.position == "-z" then
            lineRot.y= lineRot.y+90
        linePos.x=0
        linePos.z=-mapHeight/4
    end
    spawnLine(linePos, lineRot, lineScale, drawData.color,  "deployZone")
end

function drawQuarter(drawData)
    local mat = getObjectFromGUID(mat_GUID)
    local linePos = {x = 0, y = deployLineYPos, z = 0}
    local lineRot = {x = 0, y = 90, z = 0}
    local lineScale = {x = 5, y = deployLineHeight, z = 0.02}
    local mapBase = mat.getScale().z * sizeMulti --short edge
    local mapHeight = mat.getScale().x * sizeMulti --long edge
    if drawData.position == "x" then
        mapBase = mat.getScale().x * sizeMulti
        mapHeight = mat.getScale().z * sizeMulti
    end
    lineScale.x = (mapBase/2)-drawData.fromCenter
    linePos.z =  (lineScale.x/2) + drawData.fromCenter
    if drawData.position == "xz" then
        -- default values
    end
    if drawData.position == "x-z" or drawData.position == "-x-z" then
        linePos.z = -linePos.z
    end
    spawnLine(linePos, lineRot, lineScale, drawData.color,  "deployZone") -- short line
    lineScale.x = (mapHeight/2)-drawData.fromCenter
    linePos.z = 0
    linePos.x =  (lineScale.x/2) + drawData.fromCenter
    lineRot.y = 0
    if drawData.position == "-xz" or drawData.position == "-x-z" then
        linePos.x = -linePos.x
    end
    spawnLine(linePos, lineRot, lineScale, drawData.color, "deployZone") -- long line
end

function drawCircle(drawData, type)
    local originalCircle=getObjectFromGUID(centerCircle_GUID)
    local circleObj = originalCircle.clone({ position = {0, -5, 0}})
    if circleObj then
        circleObj.setLock(true)
        circleObj.setScale({drawData.fromCenter, deployLineHeight, drawData.fromCenter})
        circleObj.setPosition({0, deployLineYPos, 0})
        circleObj.setColorTint(drawData.color)
        circleObj.setGMNotes(type)
        circleObj.setName("")
        local blockComp = circleObj.getComponent("BoxCollider")
        blockComp.set("enabled", false)
    end
end

function drawCircleInZone(drawData, type)
    local mat = getObjectFromGUID(mat_GUID)
    local mapBase = mat.getScale().z * sizeMulti --short edge
    local mapHeight = mat.getScale().x * sizeMulti --long edge
    if drawData.position == "z" or drawData.position == "-z" then
        mapBase = mat.getScale().x * sizeMulti
        mapHeight = mat.getScale().z * sizeMulti
    end
    local posX=0
    local posZ=0
    if drawData.position == "x" then
        posX=((mapHeight/2-drawData.deployFromCenter)/2)+drawData.deployFromCenter
    end
    if drawData.position == "-x" then
        posX=-((mapHeight/2-drawData.deployFromCenter)/2)+drawData.deployFromCenter
    end
    if drawData.position == "z" then
        posZ=((mapHeight/2-drawData.deployFromCenter)/2)+drawData.deployFromCenter
    end
    if drawData.position == "-z" then
        posZ=-((mapHeight/2-drawData.deployFromCenter)/2)+drawData.deployFromCenter
    end
     drawCircleNotCentered(drawData, type, posX,posZ)
end

function drawCircleNotCentered(drawData, type, centerX, centerZ)
    local originalCircle=getObjectFromGUID(centerCircle_GUID)
    local circleObj = originalCircle.clone({ position = {0, -5, 0}})
    if circleObj then
        circleObj.setLock(true)
        circleObj.setScale({drawData.fromCenter, deployLineHeight, drawData.fromCenter})
        circleObj.setPosition({centerX, deployLineYPos, centerZ})
        circleObj.setColorTint(drawData.color)
        circleObj.setGMNotes(type)
        circleObj.setName("")
        local blockComp = circleObj.getComponent("BoxCollider")
        blockComp.set("enabled", false)
    end
end

function drawLine(drawData)
    local mat = getObjectFromGUID(mat_GUID)
    local linePos = {x = 0, y = deployLineYPos, z = 0}
    local lineRot = {x = 0, y = 90, z = 0}
    local lineScale = {x = 5, y = deployLineHeight, z = 0.02}
    local mapBase = mat.getScale().z * sizeMulti --short edge
    local mapHeight = mat.getScale().x * sizeMulti --long edge
    if drawData.position == "z" or drawData.position == "-z" then
        mapBase = mat.getScale().x * sizeMulti
        mapHeight = mat.getScale().z * sizeMulti
    end
    if drawData.fromSide then
        if drawData.fromSide ~= 0 then
            drawData.fromCenter = (mapBase/2)-drawData.fromSide
        end
    end
    lineScale.x = mapBase
    linePos.x = drawData.fromCenter
    if drawData.position == "x" then
        -- defaut values
    end
    if drawData.position == "-x" then
        linePos.x = -linePos.x
    end
    if drawData.position == "z" then
        lineRot.y = 0
        linePos.z = linePos.x
        linePos.x = 0
    end
    if drawData.position == "-z" then
        lineRot.y = 0
        linePos.z = -linePos.x
        linePos.x = 0
    end
    spawnLine(linePos, lineRot, lineScale, drawData.color, "deployZone")
end

function drawArrow(drawData)
    local mat = getObjectFromGUID(mat_GUID)
    local linePos = {x = 0, y = deployLineYPos, z = 0}
    local lineRot = {x = 0, y = 0, z = 0}
    local lineScale = {x = 5, y = deployLineHeight, z = 0.02}
    local mapBase =  mat.getScale().z * sizeMulti --short edge
    local mapHeight = mat.getScale().x * sizeMulti --long edge
    if drawData.position == "z" or drawData.position == "-z" then
        mapBase = mat.getScale().x * sizeMulti
        mapHeight = mat.getScale().z * sizeMulti
    end
    if drawData.wide ~= 0 then
        mapBase = drawData.wide *2
    end
    local triBase = (mapBase / 2) -- triangle with hypotenuse as the needed deploy line
    local triHeight = (mapHeight / 2) - drawData.fromCenter - drawData.fromEdge -- triangle with hypotenuse as the needed deploy line
    local edgeAngle = 0 -- angle of the line from the given map edge
    local edgeAngleRad = 0
    local halfTriBase = 0 -- triangle with hypotenuse that is half the line lenght
    local halfTriHeight = 0 -- triangle with hypotenuse that is half the line lenght
    lineScale.x = math.sqrt(math.pow(triBase, 2) + math.pow(triHeight, 2))
    edgeAngleRad = math.atan(triBase / triHeight)
    edgeAngle = math.deg(edgeAngleRad)
    lineRot.y = edgeAngle
    halfTriBase = (lineScale.x / 2) * math.sin(edgeAngleRad)
    halfTriHeight = (lineScale.x  / 2 ) * math.cos(edgeAngleRad)
    linePos.x = triHeight - halfTriHeight + drawData.fromCenter
    linePos.z = -1 * (triBase - halfTriBase)
    if drawData.position == "x" then
        --default values
    end
    if drawData.position == "-x" then
        linePos.z = -linePos.z
        linePos.x = -linePos.x
    end
    if drawData.position == "z" then
        local tmp = linePos.z
        linePos.z = linePos.x
        linePos.x = -tmp
        lineRot.y = 90 + lineRot.y
    end
    if drawData.position == "-z" then
        local tmp = linePos.z
        linePos.z = -linePos.x
        linePos.x = tmp
        lineRot.y = 90 + lineRot.y
    end

    spawnLine(linePos, lineRot, lineScale, drawData.color, "deployZone")
    if drawData.position == "x" or drawData.position == "-x"  then
        linePos.z = -linePos.z
        lineRot.y = -lineRot.y
    end
    if drawData.position == "z" or drawData.position == "-z"  then
        linePos.x = -linePos.x
        lineRot.y = -lineRot.y
    end
    spawnLine(linePos, lineRot, lineScale, drawData.color, "deployZone")
end

function spawnLine(linePos, lineRot, lineScale, color, type)
    local lineObj = spawnObject({ --Chip_10
        type = "BlockSquare",
        position = linePos,
        rotation = lineRot,
        scale = lineScale,
    })
    if lineObj then
        lineObj.setLock(true)
        lineObj.setGMNotes(type)
        lineObj.setColorTint(color)
        local blockComp = lineObj.getComponent("BoxCollider")
        blockComp.set("enabled", false)
    end
end

function destroyDeployZones()
    for i, obj in ipairs(getAllObjects()) do
        if obj.getGMNotes() == "deployZone" then
            obj.destroy()
        end
    end
end

function disableCollidersDeployZones()
    for i, obj in ipairs(getAllObjects()) do
        if obj.getGMNotes() == "deployZone" or obj.getGMNotes() == "areaDeny" or obj.getGMNotes() == "quarter" then
            local blockComp = obj.getComponent("BoxCollider")
            blockComp.set("enabled", false)
        end
    end

end
-- END deploy zones MANAGER


showBagsVariable = false
KTitemsGUID = "d6cb38"
_40KitemsGUID = "5549a7"
simulation = false -- is used to test in single player
redFirstLbl = "R  e  d    p l a y e r    f i r s t\n(click to toggle)"
blueFirstLbl = "B l u e    p l a y e r    f i r s t\n(click to toggle)"
inGame = false
gameTurnCounter = nil
checkEnd = false -- used to display or not the ingame labels of deployment and itc
armyMover = ""
first = "Red"
currentTurn = "Red"
phases40k = {"Command", "Movement", "Psychic", "Shooting", "Charge", "Fight", "Morale"}
phasesKT = {"Initiative", "Movement", "Psychic", "Shooting", "Fight", "Morale"}
currentPhase = 1
startBtn = {
    index = 1, label = "S T A R T  G A M E", click_function = "startGame", function_owner = self,
    position = {0, 5, - 1}, rotation = {0, 0, 0}, height = 750, width = 5000,
    font_size = 500, color = {0, 0.6, 0}, font_color = {1, 1, 1}
}
firstPlayerBtn = {
    index = 1, label = redFirstLbl, click_function = "togglePlyr", function_owner = self,
    position = {0, 5, 1}, rotation = {0, 0, 0}, height = 750, width = 5000,
    font_size = 300, color = {1, 0, 0}, font_color = {1, 1, 1}
}
nextPhaseLbl = "P A S S\nT U R N"
nextPhaseBtn = {
    index = 1, label = nextPhaseLbl, tooltip = "Left click - Next phase\nRight click - Skip to next turn", click_function = "nextPhase", function_owner = self,
    position = {0, 5, 0}, rotation = {0, 0, 0}, height = 1500, width = 5000,
    font_size = 600, color = {1, 0, 0}, font_color = {1, 1, 1}
}

notePadTxt = "This is version 2.0+ of Forty Thousand Collection 'FTC' gaming template for Warhammer 40k.\nBACON CAT BUG DOES NOT WORK ON THIS MOD ANYMORE!\nSO DONT CONTACT HIM!.\n\nBy default hands are hidden as per CA 19 Rules.\n\nInstructions can be found by clicking the relative purple buttons on the table.\n\nThe Notepad contains the full credits.\n\nSearch for FTC or BCB Map Additive Load on the workshop for maps to load!\n\n\nHere some Discord TTS servers for 40k\n\ndiscord.gg/neuautf\n\ndiscord.gg/XkBbs5M"
--
menuX = 15
menuZ = 1.05-1.05
arrowOffset = 7.5
-- DEPLOY ZONES VARIABLES

otherBagsGUID = { "5549a7", "d6cb38"} -- 40k / kt tems
--deployBagGUID={}

deploymentIngamePlaced = false
deploymentPregamePlaced = false
deployMenu = true -- if the menu is open or not
deployLblOpen = "Hide deployment menu"
deployLblOpen = "S e l e c t    d e p l o y m e n t    z o n e s"
deployLblClosed = "Show deployment zones"
deployIngameLblOpen = "H i d e\nd e p l o y m e n t\nz o n e s"
deployIngameLblClosed = "S h o w\nd e p l o y m e n t\nz o n e s"
numberDeployZones = 6
defaultDeployHeight=2
deployOffset = 0
deployTypeMenuBtn = {
    index = 1, label = deployLblClosed, click_function = "hideShowDeployMenu", function_owner = self,
    position = { - 12.5, 5, 1.4}, rotation = {0, 0, 0}, height = 450, width = 8000,
    font_size = 300, color = {0, 0, 0}, font_color = {1, 1, 1}
}
deployTypeBtn = {
    index = i, label = "Zone", click_function = "togglePregameDeploy", function_owner = self,
    position = { - menuX, 5, menuZ}, rotation = {0, 0, 0}, height = 450, width = 6000,
    font_size = 300, color = {1, 1, 1}, font_color = {0, 0, 0}
}
deployTypeUpBtn = {
    index = 1, label = "->", click_function = "deployTypeUp", function_owner = self,
    position = { - menuX + arrowOffset, 5, menuZ}, rotation = {0, 0, 0}, height = 450, width = 800,
    font_size = 300, color = {0, 0, 0}, font_color = {1, 1, 1}
}
deployTypeDownBtn = {
    index = 1, label = "<-", click_function = "deployTypeDown", function_owner = self,
    position = { - menuX - arrowOffset, 5, menuZ}, rotation = {0, 0, 0}, height = 450, width = 800,
    font_size = 300, color = {0, 0, 0}, font_color = {1, 1, 1}
}

secondRowOffset= 1.2
deployMenuBtn = {
    index = 1, label = deployLblClosed, click_function = "hideShowDeployMenu", function_owner = self,
    position = { - 12.5, 5, 1.4}, rotation = {0, 0, 0}, height = 450, width = 8000,
    font_size = 300, color = {0, 0, 0}, font_color = {1, 1, 1}
}
deployBtn = {
    index = i, label = "Zone", click_function = "togglePregameDeploy", function_owner = self,
    position = { - menuX, 5, menuZ+secondRowOffset}, rotation = {0, 0, 0}, height = 450, width = 6000,
    font_size = 300, color = {1, 1, 1}, font_color = {0, 0, 0}
}
deployUpBtn = {
    index = 1, label = "->", click_function = "deployUp", function_owner = self,
    position = { - menuX + arrowOffset, 5, menuZ+secondRowOffset}, rotation = {0, 0, 0}, height = 450, width = 800,
    font_size = 300, color = {0, 0, 0}, font_color = {1, 1, 1}
}
deployDownBtn = {
    index = 1, label = "<-", click_function = "deployDown", function_owner = self,
    position = { - menuX - arrowOffset, 5, menuZ+secondRowOffset}, rotation = {0, 0, 0}, height = 450, width = 800,
    font_size = 300, color = {0, 0, 0}, font_color = {1, 1, 1}
}
deployIngameBtn = {
    index = 1, label = deployIngameLblClosed, click_function = "showHideIngameDeployment", function_owner = self,
    position = { - menuX - 6, 5, menuZ}, rotation = {0, 0, 0}, height = 1500, width = 2600,
    font_size = 300, color = {1, 1, 1}, font_color = {0, 0, 0}
}
deployOffsetMenuBtn = {
    index = 1, label = "Height", click_function = "none", function_owner = self,
    position = {-menuX - 1.4*arrowOffset, 5, menuZ}, rotation = {0, 0, 0}, height = 450, width = 1000,
    font_size = 300, color = {0, 0, 0}, font_color = {1, 1, 1}
}
deployOffsetUpBtn = {
    index = 1, label = "+", click_function = "deployOffsetUp", function_owner = self,
    position = {-menuX - 1.4*arrowOffset, 5, menuZ - secondRowOffset}, rotation = {0, 0, 0}, height = 450, width = 800,
    font_size = 300, color = {0, 0, 0}, font_color = {1, 1, 1}
}
deployOffsetDownBtn = {
    index = 1, label = "-", click_function = "deployOffsetDown", function_owner = self,
    position = {-menuX - 1.4*arrowOffset, 5, menuZ + secondRowOffset}, rotation = {0, 0, 0}, height = 450, width = 800,
    font_size = 300, color = {0, 0, 0}, font_color = {1, 1, 1}
}
-- OBJECTIVES MANAGER
defaultObjectivesHeight=1.22
originalObjectivesGuid={"573333","764a2e","6d45cf","33e32b","f32864","a91751",--[[repeating 1 and 2]]"573333","764a2e"} -- last two are placeholders
crusade2obj={{type = "fixed", pos={2, objectivesOffset, 0}},{type = "fixed", pos={-2, objectivesOffset, 0}}}
crusade3obj={{type = "fixed", pos={2, objectivesOffset, 2}},{type = "fixed", pos={2, objectivesOffset, -2}},{type = "fixed", pos={-2, objectivesOffset, 2}}}
crusade4obj={{type = "fixed", pos={2, objectivesOffset, 2}},{type = "fixed", pos={2, objectivesOffset, -2}},{type = "fixed", pos={-2, objectivesOffset, 2}},{type = "fixed", pos={-2, objectivesOffset, -2}}}
crusade6obj={{type = "fixed", pos={2, objectivesOffset, 4}},{type = "fixed", pos={2, objectivesOffset, 0}},{type = "fixed", pos={2, objectivesOffset, -4}},{type = "fixed", pos={-2, objectivesOffset, 4}},{type = "fixed", pos={-2, objectivesOffset, 0}},{type = "fixed", pos={-2, objectivesOffset, -4}}}
crusade8obj={{type = "fixed", pos={2, objectivesOffset, 6}},{type = "fixed", pos={2, objectivesOffset, 2}},{type = "fixed", pos={2, objectivesOffset, -2}},{type = "fixed", pos={2, objectivesOffset, -6}},{type = "fixed", pos={-2, objectivesOffset, 6}},{type = "fixed", pos={-2, objectivesOffset, 2}},{type = "fixed", pos={-2, objectivesOffset, -2}},{type = "fixed", pos={-2, objectivesOffset, -6}}}
oldITCobj={
    {id = 1, name = "#1 ITC Seize Ground",          objectives = {{type = "fixed", pos={18, objectivesOffset, 12}},{type = "fixed", pos={18, objectivesOffset, -12}},{type = "fixed", pos={8, objectivesOffset, 0}},{type = "fixed", pos={-18, objectivesOffset, 12}},{type = "fixed", pos={-18, objectivesOffset, -12}},{type = "fixed", pos={-8, objectivesOffset, 0}}}},
    {id = 2, name = "#2 ITC Cut to the Heart",      objectives = {{type = "fixed", pos={0, objectivesOffset, -24}},{type = "fixed", pos={0, objectivesOffset,   24}},{type = "fixed", pos={0, objectivesOffset, 0}}}},
    {id = 3, name = "#3 ITC Nexus Control",         objectives = {{type = "fixed", pos={2, objectivesOffset, 24}},{type = "fixed", pos={-2, objectivesOffset,  24}},{type = "fixed", pos={2, objectivesOffset, -24}},{type = "fixed", pos={-2, objectivesOffset, -24}}}},
    {id = 4, name = "#4 ITC What's Yours is Mine",  objectives = {{type = "fixed", pos={2, objectivesOffset, 24}},{type = "fixed", pos={-2, objectivesOffset,   24}},{type = "fixed", pos={2, objectivesOffset, -24}},{type = "fixed", pos={-2, objectivesOffset, -24}},{type = "fixed", pos={0, objectivesOffset, 0}}}},
    {id = 5, name = "#5 ITC Precious Cargo",        objectives = {{type = "fixed", pos={18, objectivesOffset, 12}},{type = "fixed", pos={18, objectivesOffset, -12}},{type = "fixed", pos={-18, objectivesOffset, 12}},{type = "fixed", pos={-18, objectivesOffset, -12}},{type = "fixed", pos={0, objectivesOffset, 0}}}},
    {id = 6, name = "#6 ITC Crucible of Champions", objectives = {{type = "fixed", pos={0, objectivesOffset, 18}},{type = "fixed", pos={0, objectivesOffset,   -18}},{type = "fixed", pos={24, objectivesOffset, 0}},{type = "fixed", pos={-24, objectivesOffset, 0}},{type = "fixed", pos={0, objectivesOffset, 0}}}},
    {id = 0, name = "None", objectives = {} },
}

objectivesData = {
    {   id=-1 , type = "None",
        objectivesList={
            {id = 0, name = "None", objectives = {} },
        }
    },
    {   id=0 , type = "Open Hostility",
        objectivesList={
            {id = 0, name = "None", objectives = {} },
        }
    },
    {   id=1 , type = "Combat Patrol",
        objectivesList={
            {id = 1, name = "EW #1 Incisive attack", objectives = {{type = "fixed", pos={16, objectivesOffset, 0}},{type = "fixed", pos={-16, objectivesOffset, 0}},{type = "fixed", pos={0, objectivesOffset, 9}},{type = "fixed", pos={0, objectivesOffset, -9}}}},
            {id = 2, name = "EW #2 Outriders", objectives = {{type = "fixed", pos={14, objectivesOffset, 9}},{type = "fixed", pos={14, objectivesOffset, -9}},{type = "fixed", pos={-14, objectivesOffset, 9}},{type = "fixed", pos={-14, objectivesOffset, -9}}}},
            {id = 3, name = "EW #3 Encircle", objectives = {{type = "fixed", pos={16, objectivesOffset, 3}},{type = "fixed", pos={6, objectivesOffset, -6}},{type = "fixed", pos={-16, objectivesOffset, -3}},{type = "fixed", pos={-6, objectivesOffset, 6}}}},

            {id = 4, name = "Cr #1 Sweep and Clear", objectives = crusade4obj },
            {id = 5, name = "Cr #2 Supply drop", objectives = crusade3obj },

            {id = 0, name = "None", objectives = {} },
        }
    },
    {   id=2 , type = "Incursion",
        objectivesList={
            {id = 1, name = "EW #1 Divide and Conquer", objectives = {{type = "fixed", pos={10, objectivesOffset, 0}},{type = "fixed", pos={-10, objectivesOffset, 0}},{type = "fixed", pos={0, objectivesOffset, 10}},{type = "fixed", pos={0, objectivesOffset, -10}}}},
            {id = 2, name = "EW #2 Crossfire", objectives = {{type = "fixed", pos={12, objectivesOffset, 10}},{type = "fixed", pos={-12, objectivesOffset, -10}},{type = "fixed", pos={12, objectivesOffset, -10}},{type = "fixed", pos={-12, objectivesOffset, 10}}}},
            {id = 3, name = "EW #3 Centre Ground", objectives = {{type = "fixed", pos={12, objectivesOffset, -8}},{type = "fixed", pos={-12, objectivesOffset, 8}},{type = "fixed", pos={0, objectivesOffset, 8}},{type = "fixed", pos={0, objectivesOffset, -8}}}},
            {id = 4, name = "EW #4 Forward Push", objectives = {{type = "fixed", pos={16, objectivesOffset, 6}},{type = "fixed", pos={6, objectivesOffset, -9}},{type = "fixed", pos={-6, objectivesOffset, 9}},{type = "fixed", pos={-16, objectivesOffset, -6}}}},
            {id = 5, name = "EW #5 Ransack", objectives = {{type = "fixed", pos={16, objectivesOffset, 7}},{type = "fixed", pos={16, objectivesOffset, -7}},{type = "fixed", pos={0, objectivesOffset, 12}},{type = "fixed", pos={-16, objectivesOffset, 7}},{type = "fixed", pos={-16, objectivesOffset, -7}},{type = "fixed", pos={0, objectivesOffset, -12}}}},
            {id = 6, name = "EW #6 Shifting Front", objectives = {{type = "fixed", pos={14, objectivesOffset, 0}},{type = "fixed", pos={-14, objectivesOffset, 0}},{type = "fixed", pos={0, objectivesOffset, 12}},{type = "fixed", pos={0, objectivesOffset, -12}}}},

            {id = 12, name = "GT20 #11 Crossfire", objectives = {{type = "fixed", pos={12, objectivesOffset, 10}},{type = "fixed", pos={-12, objectivesOffset, -10}},{type = "fixed", pos={12, objectivesOffset, -10}},{type = "fixed", pos={-12, objectivesOffset, 10}}}},
            {id = 13, name = "GT20 #12 Resupply", objectives = {{type = "fixed", pos={16, objectivesOffset, 0}},{type = "fixed", pos={0, objectivesOffset, -12}},{type = "fixed", pos={-16, objectivesOffset, 0}},{type = "fixed", pos={0, objectivesOffset, 12}},{type = "fixed", pos={0, objectivesOffset, 0}}}},
            {id = 14, name = "GT20 #13 Raid", objectives = {{type = "fixed", pos={14, objectivesOffset, 8}},{type = "fixed", pos={14, objectivesOffset, -8}},{type = "fixed", pos={-14, objectivesOffset, 8}},{type = "fixed", pos={-14, objectivesOffset, -8}},{type = "fixed", pos={0, objectivesOffset, 12}},{type = "fixed", pos={0, objectivesOffset, -12}}}},
            {id = 15, name = "GT20 #21 Centre Ground", objectives = {{type = "fixed", pos={16.83, objectivesOffset, -8}},{type = "fixed", pos={-16.83, objectivesOffset, 8}},{type = "fixed", pos={0, objectivesOffset, 8}},{type = "fixed", pos={0, objectivesOffset, -8}}}},
            {id = 16, name = "GT20 #22 Ascension", objectives = {{type = "fixed", pos={14, objectivesOffset, 0}},{type = "fixed", pos={-14, objectivesOffset, 0}},{type = "fixed", pos={0, objectivesOffset, 12}},{type = "fixed", pos={0, objectivesOffset, -12}},{type = "fixed", pos={0, objectivesOffset, 0}}}},
            {id = 17, name = "GT20 #23 Forward Push", objectives = {{type = "fixed", pos={16, objectivesOffset, 6}},{type = "fixed", pos={3, objectivesOffset, -9}},{type = "fixed", pos={-3, objectivesOffset, 9}},{type = "fixed", pos={-16, objectivesOffset, -6}}}},
            {id = 18, name = "GT20 #31 Rise of the Machine Spirit", objectives = {{type = "fixed", pos={12, objectivesOffset, 9}},{type = "fixed", pos={-12, objectivesOffset, -9}},{type = "fixed", pos={12, objectivesOffset, -9}},{type = "fixed", pos={-12, objectivesOffset, 9}}}},
            {id = 19, name = "GT20 #32 Show of Force", objectives = {{type = "fixed", pos={14, objectivesOffset, 0}},{type = "fixed", pos={-14, objectivesOffset, 0}},{type = "fixed", pos={0, objectivesOffset, 10}},{type = "fixed", pos={0, objectivesOffset, -10}}}},
            {id = 20, name = "GT20 #33 Reconaissance Mission", objectives = {{type = "fixed", pos={12, objectivesOffset, 10}},{type = "fixed", pos={-12, objectivesOffset, -10}},{type = "fixed", pos={12, objectivesOffset, -10}},{type = "fixed", pos={-12, objectivesOffset, 10}}}},



            {id = 7,  name = "Cr #1 Supply Cache", objectives = crusade4obj },
            {id = 8,  name = "Cr #2 The Relic", objectives = {{type = "fixed", pos={0, objectivesOffset, 0}}}},
            {id = 9,  name = "Cr #3 Sabotage", objectives =crusade4obj },
            {id = 10, name = "Cr #4 Reckon Patrol", objectives = crusade4obj },
            {id = 11, name = "Cr #5 The Ritual", objectives = crusade4obj },

            {id = 0, name = "None", objectives = {} },
        }
    },
    {   id=3 , type = "Strike Force",
    objectivesList={
        {id = 1, name = "EW #1 Retrieval Mission", objectives = {{type = "fixed", pos={20, objectivesOffset, 0}},{type = "fixed", pos={8, objectivesOffset, 12}},{type = "fixed", pos={8, objectivesOffset, -12}},{type = "fixed", pos={-20, objectivesOffset, 0}},{type = "fixed", pos={-8, objectivesOffset, 12}},{type = "fixed", pos={-8, objectivesOffset, -12}}}},
        {id = 2, name = "EW #2 Front-line Warfare", objectives = {{type = "fixed", pos={16, objectivesOffset, 0}},{type = "fixed", pos={-16, objectivesOffset, 0}},{type = "fixed", pos={0, objectivesOffset, 16}},{type = "fixed", pos={0, objectivesOffset, -16}}}},
        {id = 3, name = "EW #3 The Four Pillars ", objectives = {{type = "fixed", pos={15, objectivesOffset, 10}},{type = "fixed", pos={-15, objectivesOffset, -10}},{type = "fixed", pos={15, objectivesOffset, -10}},{type = "fixed", pos={-15, objectivesOffset, 10}}}},
        {id = 4, name = "EW #4  No Man's Land", objectives = {{type = "fixed", pos={20, objectivesOffset, 0}},{type = "fixed", pos={-20, objectivesOffset, 0}},{type = "fixed", pos={0, objectivesOffset, 12}},{type = "fixed", pos={0, objectivesOffset, -12}},{type = "fixed", pos={0, objectivesOffset, 0}}}},
        {id = 5, name = "EW #5 Scorched Earth", objectives = {{type = "fixed", pos={18, objectivesOffset, 0}},{type = "fixed", pos={12, objectivesOffset, -12}},{type = "fixed", pos={12, objectivesOffset, 12}},{type = "fixed", pos={-18, objectivesOffset, 0}},{type = "fixed", pos={-12, objectivesOffset, -12}},{type = "fixed", pos={-12, objectivesOffset, 12}}}},
        {id = 6, name = "EW #6 Vital Intelligence", objectives = {{type = "diagonal", orientation="xz", pos={18}}, {type = "diagonal", orientation="x-z", pos={12}},{type = "diagonal", orientation="x-z", pos={24}},{type = "diagonal", orientation="-x-z", pos={18}},{type = "diagonal", orientation="-xz", pos={12}},{type = "diagonal", orientation="-xz", pos={24}},}},

        {id = 12, name =  "GT20 #11 Retrieval Mission", objectives = {{type = "fixed", pos={20, objectivesOffset, 0}},{type = "fixed", pos={8, objectivesOffset, 12}},{type = "fixed", pos={8, objectivesOffset, -12}},{type = "fixed", pos={-20, objectivesOffset, 0}},{type = "fixed", pos={-8, objectivesOffset, 12}},{type = "fixed", pos={-8, objectivesOffset, -12}}}},
        {id = 13, name = "GT20 #12 Scorched Earth", objectives = {{type = "fixed", pos={18, objectivesOffset, 0}},{type = "fixed", pos={12, objectivesOffset, -12}},{type = "fixed", pos={12, objectivesOffset, 12}},{type = "fixed", pos={-18, objectivesOffset, 0}},{type = "fixed", pos={-12, objectivesOffset, -12}},{type = "fixed", pos={-12, objectivesOffset, 12}}}},
        {id = 14, name = "GT20 #13 Vital Intelligence", objectives = {{type = "diagonal", orientation="xz", pos={18}}, {type = "diagonal", orientation="x-z", pos={12}},{type = "diagonal", orientation="x-z", pos={24}},{type = "diagonal", orientation="-x-z", pos={18}},{type = "diagonal", orientation="-xz", pos={12}},{type = "diagonal", orientation="-xz", pos={24}}}},
        {id = 15, name = "GT20 #21 Surround and Destroy", objectives = {{type = "fixed", pos={10, objectivesOffset, 0}},{type = "fixed", pos={20, objectivesOffset, -14}},{type = "fixed", pos={20, objectivesOffset, 14}},{type = "fixed", pos={-10, objectivesOffset, 0}},{type = "fixed", pos={-20, objectivesOffset, -14}},{type = "fixed", pos={-20, objectivesOffset, 14}}}},
        {id = 16, name = "GT20 #22 Battle Lines", objectives = {{type = "fixed", pos={18, objectivesOffset, 0}},{type = "fixed", pos={0, objectivesOffset, 14}},{type = "fixed", pos={-18, objectivesOffset, 0}},{type = "fixed", pos={0, objectivesOffset, -14}}}},
        {id = 17, name = "GT20 #23 The Scouring", objectives = {{type = "fixed", pos={0, objectivesOffset, 0}},{type = "fixed", pos={8, objectivesOffset, 14}},{type = "fixed", pos={8, objectivesOffset, -14}},{type = "fixed", pos={-8, objectivesOffset, 14}},{type = "fixed", pos={-8, objectivesOffset, -14}}}},
        {id = 18, name = "GT20 #31 Overrun", objectives = {{type = "fixed", pos={16, objectivesOffset, 10}},{type = "fixed", pos={16, objectivesOffset, -10}},{type = "fixed", pos={0, objectivesOffset, 16}}, {type = "fixed", pos={-16, objectivesOffset, 10}},{type = "fixed", pos={-16, objectivesOffset, -10}},{type = "fixed", pos={0, objectivesOffset, -16}}}},
        {id = 19, name = "GT20 #32 Sweep and Clear", objectives = {{type = "fixed", pos={0, objectivesOffset, 0}},{type = "fixed", pos={15, objectivesOffset, 12}},{type = "fixed", pos={15, objectivesOffset, -12}},{type = "fixed", pos={-15, objectivesOffset, 12}},{type = "fixed", pos={-15, objectivesOffset, -12}}}},
        {id = 20, name = "GT20 #33 Priority Target", objectives = {{type = "fixed", pos={0, objectivesOffset, 0}},{type = "fixed", pos={15, objectivesOffset, 12}},{type = "fixed", pos={15, objectivesOffset, -12}},{type = "fixed", pos={-15, objectivesOffset, 12}},{type = "fixed", pos={-15, objectivesOffset, -12}}}},

        {id = 7,   name = "Cr #1 Supplies from Above", objectives = crusade6obj },
        {id = 8,   name = "Cr #2 Narrow the Search", objectives = crusade4obj },
        {id = 9,   name = "Cr #3 Cut off the Head", objectives = crusade2obj },
        {id = 10,  name = "Cr #4 Retrieval", objectives = crusade6obj },
        {id = 11,  name = "Cr #5 Raze and Ruin", objectives = crusade6obj },

        {id = 0, name = "None", objectives = {} },
    }
    },
    {   id=4 , type = "Onslaught",
        objectivesList={
            {id = 1, name = "EW #1 Lines of Battle", objectives = {{type = "diagonal", orientation="x-z", pos={12}},{type = "diagonal", orientation="x-z", pos={30}},{type = "diagonal", orientation="x-z", pos={48}},{type = "diagonal", orientation="-xz", pos={12}},{type = "diagonal", orientation="-xz", pos={30}},{type = "diagonal", orientation="-xz", pos={48}}}},
            {id = 2, name = "EW #2 All-out War", objectives = {{type = "fixed", pos={24, objectivesOffset, 0}},{type = "fixed", pos={0, objectivesOffset, -6}},{type = "fixed", pos={-24, objectivesOffset, 0}},{type = "fixed", pos={0, objectivesOffset, 6}},{type = "fixed", pos={30, objectivesOffset, 20}},{type = "fixed", pos={30, objectivesOffset, -20}},{type = "fixed", pos={-30, objectivesOffset, 20}},{type = "fixed", pos={-30, objectivesOffset, -20}}}},
            {id = 3, name = "EW #3 Pathway to Glory", objectives = {{type = "fixed", pos={12, objectivesOffset, 0}},{type = "fixed", pos={0, objectivesOffset, -12}},{type = "fixed", pos={-12, objectivesOffset, 0}},{type = "fixed", pos={0, objectivesOffset, 12}},{type = "fixed", pos={24, objectivesOffset, 16}},{type = "fixed", pos={24, objectivesOffset, -16}},{type = "fixed", pos={-24, objectivesOffset, 16}},{type = "fixed", pos={-24, objectivesOffset, -16}}}},

            {id = 4,  name = "Cr #2 Grand Assault", objectives = crusade8obj },
            {id = 5,  name = "Cr #3 Field of Glory", objectives = crusade8obj },

            {id = 0, name = "None", objectives = {} },
        }
    },
    {   id=5 , rotateUp = true, type = "ITC objectives ( 8th ed )",
        objectivesList=oldITCobj
    },
    --[[{   id=6 , rotateUp = true, type = "#2 Custom",
        objectivesList=oldITCobj
    },
    {   id=7 , rotateUp = true, type = "#3 Custom",
        objectivesList=oldITCobj
    },]]

}

function spawnObjectives()
    destroyAllObjectives()
    local selectedObjectivesBySize= objectivesData[objectivesTypeSelected].objectivesList
    local spawned = nil
    local pos={}
    for i, objective in ipairs(selectedObjectivesBySize[objectivesSelected].objectives) do
        pos=objective.pos
        if objectivesOffset == nil then pos[2] = 1 else pos[2] = defaultObjectivesHeight+ objectivesOffset end
            if objective.type=="fixed" then
                -- no change to pos
            end
            if objective.type=="diagonal" then
                pos=calcDiagonalPos(objective.orientation, pos[1], pos[2])
            end
        spawned = getObjectFromGUID(originalObjectivesGuid[i]).clone({ position = pos })
        spawned.setGMNotes("objective")
        spawned.setPosition(pos)
        local rotZ = 180
        if objectivesData[objectivesTypeSelected].rotateUp then
            rotZ = 0
        end
        spawned.setRotation({0,270,rotZ})
        spawned.setLock(true)
    end
end

function calcDiagonalPos(orientation, relPosOnDiagonal, posY)
    local posX = 0
    local posZ = 0
    local mat = getObjectFromGUID(mat_GUID)
    local mapBase = mat.getScale().z * sizeMulti --short edge
    local mapHeight = mat.getScale().x * sizeMulti --long edge


    local edgeAngle = 0 -- angle of the line from the given map edge
    local edgeAngleRad = 0
    local halfTriBase = 0 -- triangle with hypotenuse that is half the line lenght
    local halfTriHeight = 0 -- triangle with hypotenuse that is half the line lenght

    edgeAngleRad = math.atan(mapBase / mapHeight)
    edgeAngle = math.deg(edgeAngleRad)

    posX=relPosOnDiagonal * math.cos(edgeAngleRad)
    posZ=relPosOnDiagonal * math.sin(edgeAngleRad)
    if orientation == "xz" then
        -- default values
    end
    if orientation == "x-z" then
        posZ=-posZ
    end
    if orientation == "-xz" then
        posX=-posX
    end
    if orientation == "-x-z" then
        posX=-posX
        posZ=-posZ
    end

    return {posX,posY,posZ}
end

function destroyAllObjectives()
    for i, obj in ipairs(getAllObjects()) do
        if obj.getGMNotes() == "objective" then
            obj.destroy()
        end
    end
end

function setObjectivesHeight()
    local pos = {0,0,0}
    local found_GUID = {}
    for i, obj in ipairs(getAllObjects()) do
        if obj.getGMNotes() == "objective" then
            table.insert(found_GUID, #found_GUID+1, obj.getGUID())
        end
    end
    local found= nil
    for j, guid in ipairs(found_GUID) do
        found=getObjectFromGUID(guid)
        pos = found.getPosition()
        found.setPosition({pos[1], defaultObjectivesHeight+ objectivesOffset, pos[3]})
    end
end
--END objectives manager

objectivesMenu = true -- if the menu is open or not
objectivesLblOpen = "H i d e   I T C   m e n u"
objectivesLblOpen = "S e l e c t    o b j e c t i v e s"
objectivesLblClosed = "S h o w   I T C   o b j e c t i v e s"
--numberItcZones = 6
objectivesOffset = 0
--objectivesSelected = numberItcZones + 1
objectivesTypeMenuBtn = {
    index = 1, label = objectivesLblClosed, click_function = "hideShowObjectivesMenu", function_owner = self,
    position = {menuX, 5, 1.4}, rotation = {0, 0, 0}, height = 450, width = 8000,
    font_size = 300, color = {0, 0, 0}, font_color = {1, 1, 1}
}
objectivesTypeBtn = {
    index = i, label = " W  I  P", click_function = "none", function_owner = self,
    position = {menuX, 5, menuZ}, rotation = {0, 0, 0}, height = 450, width = 6000,
    font_size = 300, color = {1, 1, 1}, font_color = {0, 0, 0}
}
objectivesTypeUpBtn = {
    index = 1, label = "->", click_function = "objectivesTypeUp", function_owner = self,
    position = {menuX + arrowOffset, 5, menuZ}, rotation = {0, 0, 0}, height = 450, width = 800,
    font_size = 300, color = {0, 0, 0}, font_color = {1, 1, 1}
}
objectivesTypeDownBtn = {
    index = 1, label = "<-", click_function = "objectivesTypeDown", function_owner = self,
    position = {menuX - arrowOffset, 5, menuZ}, rotation = {0, 0, 0}, height = 450, width = 800,
    font_size = 300, color = {0, 0, 0}, font_color = {1, 1, 1}
}


objectivesMenuBtn = {
    index = 1, label = objectivesLblClosed, click_function = "hideShowObjectivesMenu", function_owner = self,
    position = {menuX, 5, 1.4}, rotation = {0, 0, 0}, height = 450, width = 8000,
    font_size = 300, color = {0, 0, 0}, font_color = {1, 1, 1}
}
objectivesBtn = {
    index = i, label = " W  I  P", click_function = "none", function_owner = self,
    position = {menuX, 5,  menuZ + secondRowOffset}, rotation = {0, 0, 0}, height = 450, width = 6000,
    font_size = 300, color = {1, 1, 1}, font_color = {0, 0, 0}
}
objectivesUpBtn = {
    index = 1, label = "->", click_function = "objectivesUp", function_owner = self,
    position = {menuX + arrowOffset, 5,  menuZ + secondRowOffset}, rotation = {0, 0, 0}, height = 450, width = 800,
    font_size = 300, color = {0, 0, 0}, font_color = {1, 1, 1}
}
objectivesDownBtn = {
    index = 1, label = "<-", click_function = "objectivesDown", function_owner = self,
    position = {menuX - arrowOffset, 5,  menuZ + secondRowOffset}, rotation = {0, 0, 0}, height = 450, width = 800,
    font_size = 300, color = {0, 0, 0}, font_color = {1, 1, 1}
}
objectivesOffsetMenuBtn = {
    index = 1, label = "Height", click_function = "none", function_owner = self,
    position = {menuX + 1.4*arrowOffset, 5, menuZ}, rotation = {0, 0, 0}, height = 450, width = 1000,
    font_size = 300, color = {0, 0, 0}, font_color = {1, 1, 1}
}
objectivesOffsetBtn = {
    label = tostring(objectivesOffset), click_function = "none", function_owner = self,
    position = {menuX + 5, 5, menuZ + 1.2}, rotation = {0, 0, 0}, height = 450, width = 1200,
    font_size = 300, color = {1, 1, 1}, font_color = {0, 0, 0}
}
objectivesOffsetUpBtn = {
    index = 1, label = "+", click_function = "objectivesOffsetUp", function_owner = self,
    position = {menuX + 1.4*arrowOffset, 5, menuZ - secondRowOffset}, rotation = {0, 0, 0}, height = 450, width = 800,
    font_size = 300, color = {0, 0, 0}, font_color = {1, 1, 1}
}
objectivesOffsetDownBtn = {
    index = 1, label = "-", click_function = "objectivesOffsetDown", function_owner = self,
    position = {menuX + 1.4*arrowOffset, 5, menuZ + secondRowOffset}, rotation = {0, 0, 0}, height = 450, width = 800,
    font_size = 300, color = {0, 0, 0}, font_color = {1, 1, 1}
}
sheetEnableLbl = "Place one\nITC Sheet"
sheetEnable2Lbl = "Place two\nITC Sheet"
sheetDisableLbl = "Hide\nITC Sheets"

-- ITC SHEET VARIABLES

numberOfSheet = 0 -- 0 closed, 1 sheet in common, 2 one sheet per player
sheetOpen = false
-- AREA DENIAL
areaPlaced = false
areaLblOpen = "Hide\nArea Denial"
areaLblClosed = "Show\nArea Denial"
areaBtn = {
    label = areaLblClosed, click_function = "showHideAreaDeny", function_owner = self,
    position = {menuX + 6, 5, menuZ }, rotation = {0, 0, 0}, height = 1500, width = 2600,
    font_size = 300, color = {1, 1, 1}, font_color = {0, 0, 0}
}
quartersPlaced = false
quartersLblOpen = "Hide\nTable Quarters"
quartersLblClosed = "Show\nTable Quarters"
quartersBtn = {
    label = quartersLblClosed, click_function = "showHideQuarters", function_owner = self,
    position = {menuX - 4, 5, menuZ }, rotation = {0, 0, 0}, height = 1500, width = 2600,
    font_size = 300, color = {1, 1, 1}, font_color = {0, 0, 0}
}
position = {menuX, 5, menuZ}
--
btnALbl = "Choosen deployment\n\n"
btnA = {
    index = 1, label = btnALbl, click_function = "none", function_owner = self,
    position = { - menuX + 3, 5, menuZ }, rotation = {0, 0, 0}, height = 00, width = 00,
    font_size = 400, color = {0, 0, 0}, font_color = {1, 1, 1}
}
btnBLbl = "ITC Scenario selected\n\n"
btnB = {
    index = 1, label = btnBLbl, click_function = "none", function_owner = self,
    position = {menuX - 3, 5, menuZ}, rotation = {0, 0, 0}, height = 00, width = 00,
    font_size = 400, color = {0, 0, 0}, font_color = {1, 1, 1}
}
--- SIZE VARIABLES

sizeSelected = 2
---




function showBags()
    showHideBags(true)
end
function hideBags()
    showHideBags(false)
end


function showHideBags(show)
    local centerCircle=getObjectFromGUID(centerCircle_GUID)
    centerCircle.interactable=show
    local deployBag2 = {}
    local deployBagGUID2 = {}
    if show then
        newY = 3
    else
        newY = -3
    end
    local oldPos = {}

    for i, guid in ipairs(otherBagsGUID) do
        bag = getObjectFromGUID(guid)
        oldPos = bag.getPosition()
        bag.setPosition{oldPos.x, newY, oldPos.z}
        bag.interactable = show
        if show == false then
            bag.clearButtons()
        end
    end

end


function writeMenus()
    self.clearButtons()
    if not sizeConfirmed then
        writeSizeMenu()
        writeDeployMenu()
        writeObjMenu()
    else
        if inGame == false then
            writeStartMenu()
            writeDeployMenu()
            writeObjMenu()
        else
            writeIngameMenu()
        end
    end

end

function writeStartMenu()
    if gameMode ~= "game" then return end
    self.createButton(startBtn)
    self.createButton(firstPlayerBtn)
end

function writeDeployMenu()
    if deployMenu == false then
        deployMenuBtn.position = { - menuX, 5, menuZ+secondRowOffset}
        deployMenuBtn.label = deployLblClosed
    end
    if deployMenu == true then
        deployTypeMenuBtn.position = { - menuX, 5, menuZ - 1.2}
        deployTypeMenuBtn.label = deployLblOpen
        local DeployListSelected=DeployZonesData[deployTypeSelected].zones
        deployBtn.label = DeployListSelected[deploySelected].name
        deployTypeBtn.label = DeployZonesData[deployTypeSelected].type
        self.createButton(deployTypeBtn)
        self.createButton(deployTypeUpBtn)
        self.createButton(deployTypeDownBtn)
        self.createButton(deployBtn)
        self.createButton(deployUpBtn)
        self.createButton(deployDownBtn)
        self.createButton(deployOffsetMenuBtn)
        self.createButton(deployOffsetUpBtn)
        self.createButton(deployOffsetDownBtn)
    end
    self.createButton(deployTypeMenuBtn)
end

function writeObjMenu()
    if not objectivesData[objectivesTypeSelected].objectivesList then
        return
    end
    if #objectivesData[objectivesTypeSelected].objectivesList == 0 then
        return
    end
    if objectivesMenu == false then
        objectivesMenuBtn.position = {menuX, 5, menuZ-secondRowOffset}
        objectivesMenuBtn.label = objectivesLblClosed
    end
    if objectivesMenu == true then
        objectivesMenuBtn.position = {menuX, 5, menuZ-secondRowOffset}
        objectivesMenuBtn.label = objectivesLblOpen
        local selectedObjectivesBySize = objectivesData[objectivesTypeSelected].objectivesList
        if not selectedObjectivesBySize[objectivesSelected] then
            objectivesSelected=#selectedObjectivesBySize
        end
        objectivesBtn.label = selectedObjectivesBySize[objectivesSelected].name
        objectivesTypeBtn.label = objectivesData[objectivesTypeSelected].type
        objectivesOffsetBtn.label = tostring(objectivesOffset)
        self.createButton(objectivesTypeBtn)
        self.createButton(objectivesTypeUpBtn)
        self.createButton(objectivesTypeDownBtn)
        self.createButton(objectivesBtn)
        self.createButton(objectivesUpBtn)
        self.createButton(objectivesDownBtn)

        self.createButton(objectivesOffsetDownBtn)
        self.createButton(objectivesOffsetUpBtn)
        --self.createButton(objectivesOffsetDownBtn)
        --self.createButton(objectivesOffsetBtn)

    end
    self.createButton(objectivesMenuBtn)
    self.createButton(objectivesOffsetMenuBtn)
end

function writeIngameMenu()
    self.createButton(deployIngameBtn)
    self.createButton(areaBtn)
    self.createButton(quartersBtn)
    local DeployListSelected=DeployZonesData[deployTypeSelected].zones
    btnA.label = DeployListSelected[deploySelected].name
    if #objectivesData[objectivesTypeSelected]>0 then
        btnB.label = btnBLbl..objectivesData[objectivesTypeSelected][objectivesSelected].name
    else
        btnB.label = "No objectives"
    end

    nextPhaseBtn.color = currentTurn
    local visibleTo=nextPhaseBtn.color
    if sizeData[mapSizeSelected].type == "KT" then
        nextPhaseBtn.color = "Grey"
        visibleTo=""
    end
    Global.UI.setAttribute("passTurn", "visibility", visibleTo)
    Global.UI.setAttribute("passTurnBtn", "color", nextPhaseBtn.color)
    nextPhaseBtn.label = phases[currentPhase].."\nNEXT PHASE"
    if currentPhase == #phases then
        nextPhaseBtn.label = phases[currentPhase].."\nPASS TURN"
    end
    Global.UI.setValue("passTurnTxt", nextPhaseBtn.label)
    if checkEnd == false then
        self.createButton(btnA) -- Reminder deployment selected
        --self.createButton(btnB) -- Reminder objectives selected
        self.createButton(nextPhaseBtn)
    end
end

function startGame(obj, player, alt)
    if alt then
        simulation = true
    end
    local playerList = Player.getPlayers()
    local numberOfPlayers = 0
    for i, p in ipairs(playerList) do
        numberOfPlayers = numberOfPlayers + 1
    end

    if Player["Red"].seated == false or Player["Blue"].seated == false then
        broadcastToAll("Must have both players seated", {1, 0, 0})
        if simulation == false then
            return
        end
    end
    Global.call("recordPlayers")
    inGame = true
    secondaryObj_GUID = {"cff35b","471de1"}
    for i, guid in ipairs(secondaryObj_GUID) do
        if getObjectFromGUID(guid) then
            getObjectFromGUID(guid).call("writeMenu")
        end
    end
    --WebRequest.get("http://campaign40k.altervista.org/campaign/statistics.php?name=40KGame", none)
    startCustomTurns()
    destroyDeployZones()
    deploymentIngamePlaced = false
    areaPlaced = false
    local DeployListSelected=DeployZonesData[deployTypeSelected].zones
    btnA.label = DeployListSelected[deploySelected].name
    if #objectivesData[sizeSelected]>0 then
        btnB.label = btnBLbl..objectivesData[sizeSelected][objectivesSelected].name
    else
        btnB.label = "No objectives"
    end
    broadcastToAll(phases[currentPhase].." phase", "Yellow")
    resetActivationTokens()
    Notes.setNotes("")
    if false then -- deploy text
        local deplymentSeletedTxt = spawnObject({
            type = "3DText",
            position = {53, 1, 12},
            rotation = {90, 90, 0},
            scale = {1, 2, 1}
        })
        deplymentSeletedTxt.TextTool.setValue(btnALbl..deployBag[deploySelected].getName())
    end
    writeMenus()
    simulation = false
end

function resetActivationTokens()
    for i, obj in ipairs(getAllObjects()) do
        if obj.getVar("BCBtype") == "ActivationToken" then
            obj.call("resetAlredyActed")
        end
    end
end

function nextPhaseFromGlobal(params)
    if not inGame then return end
    local alt_click = params.alt
    local player_color_click = params.color
    nextPhase(self, player_color_click, alt_click)
end

function nextPhase(obj, player_color_click, alt_click)
    if player_color_click ~= currentTurn and sizeData[mapSizeSelected].type ~= "KT" then return end
    resetActivationTokens()
    if alt_click then
        passTurn(obj, player_color_click, alt_click)
        return
    end
    currentPhase = currentPhase + 1
    if currentPhase > #phases then
        currentPhase = 1
        passTurn(obj, player_color_click, alt_click)
    end
    broadcastToAll(phases[currentPhase].." phase", "Yellow")
    writeMenus()
end

function passTurn(obj, player_color_click, alt_click)
    if player_color_click ~= currentTurn then

        if simulation then
            broadcastToAll("INTRUDER", "Pink")
        else
            return
        end

    end
    currentPhase = 1
    if currentTurn == "Red" then
        currentTurn = "Blue" -- it has to be the opposite
        blueTurnCounter.call("increaseSelf")
        blueCpCounter.Counter.increment()
        Wait.time(function() broadcastToAll("Blue CPs incremented!", "Blue") end, 0.3)
    else
        currentTurn = "Red"
        redTurnCounter.call("increaseSelf")
        redCpCounter.Counter.increment()
        Wait.time(function() broadcastToAll("Red CPs incremented!", "Red") end, 0.3)
    end
    if simulation then
        broadcastToAll("It's "..currentTurn.." turn", currentTurn)
    else
        if Player[currentTurn].steam_name then
            broadcastToAll("It's "..Player[currentTurn].steam_name.." turn", currentTurn)
        else
            broadcastToAll("It's "..currentTurn.." turn", currentTurn)
        end
    end
    writeMenus()
end

function startCustomTurns()
    if first == "Red" then
        currentTurn = "Blue" -- it has to be the opposite
    else
        currentTurn = "Red"
    end
    passTurn(self, currentTurn, false)
end

function startBuiltinTurns()
    if first == "Red" then
        Turns.order = {"Red", "Blue"}
    else
        Turns.order = {"Blue", "Red"}
    end
    Turns.pass_turns = true
    Turns.enable = false
    Turns.enable = true
end

function togglePlyr()
    self.clearButtons()
    if first == "Red" then
        firstPlayerBtn.label = blueFirstLbl
        firstPlayerBtn.color = {0, 0, 1}
        first = "Blue"
    else
        firstPlayerBtn.label = redFirstLbl
        firstPlayerBtn.color = {1, 0, 0}
        first = "Red"
    end
    writeMenus()
end

function hideShowDeployMenu()
    if deployMenu == false then
        deployMenu = true
    else
        deployMenu = false
        deployMenu = true -- for always open menu
    end
    writeMenus()
end

function hideShowObjectivesMenu()
    if objectivesMenu == false then
        objectivesMenu = true
    else
        objectivesMenu = false
        objectivesMenu = true -- for always open menu
    end
    writeMenus()
end



function placeDeploy()
    destroyDeployZones()
    local data= DeployZonesData[deployTypeSelected].zones[deploySelected]
    drawDeployZone(data)
    if data.objectivesID then
    --    print("\n\nObj wanted "..data.objectivesID)
        for i, setup in ipairs(objectivesData[objectivesTypeSelected].objectivesList) do
        --    print("ID "..setup.id.." name "..setup.name )
            if setup.id == data.objectivesID then
        --        printToAll("Found obj "..setup.name.." "..i, "Green")
                objectivesSelected = i
                for j, type in ipairs(objectivesData) do
                    if type.id ==  DeployZonesData[deployTypeSelected].id then
                        objectivesTypeSelected = j
                    end
                end
                spawnObjectives()
            end
        end
    end
    writeMenus()
end

function togglePregameDeploy()
    if deploymentPregamePlaced == false then -- place

        if deploySelected <= numberDeployZones then
            --deployBag[deploySelected].call("buttonClick_place")
        end
        deploymentPregamePlaced = true
    else -- recall
        if deploySelected <= numberDeployZones then
            --deployBag[deploySelected].call("buttonClick_recall")
        end
        deploymentPregamePlaced = false
    end
end

function deployTypeUp()
    deployTypeUpDown(true)
end

function deployTypeDown()
    deployTypeUpDown(false)
end

function deployTypeUpDown(upDown)
    deploymentPregamePlaced = true

    --if DeployZonesData[deployTypeSelected][deploySelected].objectivesID then
    --    destroyAllObjectives()
    --end
    local add=1
    if not upDown then
        add=-1
    end
    if upDown == nil then
        add = 0
    end
    deployTypeSelected = deployTypeSelected + add
    if deployTypeSelected > #DeployZonesData then
        deployTypeSelected = 1
    end
    if deployTypeSelected < 1 then
        deployTypeSelected = #DeployZonesData
    end

    for i, obj in ipairs(objectivesData) do
        if DeployZonesData[deployTypeSelected].objectivesID then
            if obj.id == DeployZonesData[deployTypeSelected].objectivesID then
                objectivesTypeSelected = i
                break
            end
        else
            if obj.id == DeployZonesData[deployTypeSelected].id then
                objectivesTypeSelected = i
                break
            end
        end

    end
    objectivesSelected = #objectivesData[objectivesTypeSelected].objectivesList
    deploySelected = #DeployZonesData[deployTypeSelected].zones
    --print("Set dep to "..deploySelected)
    writeMenus()
    placeDeploy()
    destroyAllObjectives()
end

function deployUp()
deployUpDown(true)
end

function deployDown()
    deployUpDown(false)
end

function deployUpDown(upDown)
    deployOffset=0
    deploymentPregamePlaced = true
    if DeployZonesData[deployTypeSelected].zones[deploySelected].objectivesID then
        destroyAllObjectives()
    end
    local add=1
    if not upDown then
        add=-1
    end
    deploySelected = deploySelected + add
    if deploySelected > #DeployZonesData[deployTypeSelected].zones then
        deploySelected = 1
    end
    if deploySelected < 1 then
        deploySelected = #DeployZonesData[deployTypeSelected].zones
    end
    writeMenus()
    placeDeploy()
end

function deployOffsetUp()
    deployOffsetUpDown(true)
end

function deployOffsetDown()
    deployOffsetUpDown(false)
end

function deployOffsetUpDown(upDown) -- true up, false down
    local amt = 1
    if not upDown then amt = -1 end
    deployOffset = deployOffset + amt
    if deployOffset > 25 then
        deployOffset = 25
    end
    if deployOffset < 0 then
        deployOffset = 0
    end
    writeMenus()
    setDeployHeight()
end


function objectivesUp()
    objectivesUpDown(true)
end

function objectivesDown()
    objectivesUpDown(false)
end

function objectivesUpDown(upDown)
    objectivesOffset=0
    local add = 1
    if not upDown then
        add = -1
    end
    objectivesSelected = objectivesSelected + add
    if objectivesSelected > #objectivesData[objectivesTypeSelected].objectivesList then
        objectivesSelected = 1
    end
    if objectivesSelected < 1 then
        objectivesSelected = #objectivesData[objectivesTypeSelected].objectivesList
    end
    writeMenus()
    spawnObjectives()
end

function objectivesTypeUp()
    objectivesTypeUpDown(true)
end

function objectivesTypeDown()
    objectivesTypeUpDown(false)
end

function objectivesTypeUpDown(upDown)
    local add = 1
    if not upDown then
        add = -1
    end
    objectivesTypeSelected = objectivesTypeSelected + add
    if objectivesTypeSelected > #objectivesData then
        objectivesTypeSelected = 1
    end
    if objectivesTypeSelected < 1 then
        objectivesTypeSelected = #objectivesData
    end
    objectivesSelected = #objectivesData[objectivesTypeSelected].objectivesList
    writeMenus()
    spawnObjectives()
end

function objectivesOffsetUp()
    objectivesOffsetUpDown(true)
end

function objectivesOffsetDown()
    objectivesOffsetUpDown(false)
end

function objectivesOffsetUpDown(upDown) -- true up, false down
    local amt = 1
    if not upDown then amt = -1 end
    objectivesOffset = objectivesOffset + amt
    if objectivesOffset > 25 then
        objectivesOffset = 25
    end
    if objectivesOffset < 0 then
        objectivesOffset = 0
    end
    writeMenus()
    setObjectivesHeight()
end


function showHideIngameDeployment()
    if deploymentIngamePlaced == false then -- place
        deployIngameBtn.label = deployIngameLblOpen
        if deploySelected < #DeployZonesData[deployTypeSelected].zones then
            --deployBag[deploySelected].call("buttonClick_place")
            drawDeployZone(DeployZonesData[deployTypeSelected].zones[deploySelected])
        end
        deploymentIngamePlaced = true
    else -- recall
        deployIngameBtn.label = deployIngameLblClosed
        if deploySelected < #DeployZonesData[deployTypeSelected].zones then
            --deployBag[deploySelected].call("buttonClick_recall")
            destroyDeployZones()
        end
        deploymentIngamePlaced = false
    end
    writeMenus()
end

function showHideAreaDeny()
    if areaPlaced == false then -- place
        areaBtn.label = areaLblOpen
        drawCircle({color="White", fromCenter=6}, "areaDeny")
        drawCircle({color="White", fromCenter=12}, "areaDeny")
        --areaBag.call("buttonClick_place")
        areaPlaced = true
    else -- recall
        areaBtn.label = areaLblClosed
        for i, obj in ipairs(getAllObjects()) do
            if obj.getGMNotes() == "areaDeny" then
                obj.destroy()
            end
        end
        --areaBag.call("buttonClick_recall")
        areaPlaced = false
    end
    writeMenus()
end
function showHideQuarters()
    if quartersPlaced == false then -- place
        quartersBtn.label = quartersLblOpen
        local mat = getObjectFromGUID(mat_GUID)
        local lineScale = {x = 5, y = deployLineHeight, z = 0.02}
        local mapBase = mat.getScale().z * sizeMulti --short edge
        local mapHeight = mat.getScale().x * sizeMulti --long edge
        --quartersBag.call("buttonClick_place")
        --(linePos, lineRot, lineScale, color, orientation, type)
        lineScale.x = mapHeight
        spawnLine({0, deployLineHeight, 0}, {0,0,0}, lineScale, "White", "quarter")
        lineScale.x = mapBase
        spawnLine({0, deployLineHeight ,0}, {0,90,0}, lineScale, "White", "quarter")
        quartersPlaced = true
    else -- recall
        quartersBtn.label = quartersLblClosed
        --quartersBag.call("buttonClick_recall")
        for i, obj in ipairs(getAllObjects()) do
            if obj.getGMNotes() == "quarter" then
                obj.destroy()
            end
        end
        quartersPlaced = false
    end
    writeMenus()
end

function recallAll()
    destroyAllObjectives()
    destroyDeployZones()
    if KTitems then
        KTitems.call("buttonClick_recall")
    end
end

function none()
end
