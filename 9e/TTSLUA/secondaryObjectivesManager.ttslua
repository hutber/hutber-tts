-- FTC-GUID: 471de1,cff35b

menuX=0
menuY=6.07
menuZ=0
btnRowOffset= 1.2
arrowOffset=8
titleBtn = {
    label = "S E C O N D A R Y   O B J E C T I V E S", click_function = "none", function_owner = self,
    position = { menuX , menuY, menuZ-btnRowOffset}, rotation = {0, 0, 0}, height = 450, width = 8400,
    font_size = 400, color = {0,0,0}, font_color = {1,1,1}
}
selectionBtn = {
    label = "SELECTION", click_function = "none", function_owner = self,
    position = { 0,0,0}, rotation = {0, 0, 0}, height = 450, width = 6000,
    font_size = 300, color = {1, 1, 1}, font_color = {0, 0, 0}
}
upBtn = {
    label = "->", click_function = "none", function_owner = self,
    position = { 0,0,0}, rotation = {0, 0, 0}, height = 450, width = 800,
    font_size = 300, color = {0, 0, 0}, font_color = {1, 1, 1}
}
downBtn = {
    label = "<-", click_function = "none", function_owner = self,
    position = { 0,0,0}, rotation = {0, 0, 0}, height = 450, width = 800,
    font_size = 300, color = {0, 0, 0}, font_color = {1, 1, 1}
}
spawnCardBtn = {
    label = "S P A W N\ncard", click_function = "spawnCard", function_owner = self,
    position = { 0,0,0}, rotation = {0, 0, 0}, height = 450, width = 2800,
    font_size = 200, color = {0,0,0}, font_color = {1,1,1}
}
setObjBtn = {
    label = "S E T\nto scoresheet", click_function = "setObj", function_owner = self,
    position = { 0,0,0}, rotation = {0, 0, 0}, height = 450, width = 2800,
    font_size = 200, color = {0,0,0}, font_color = {1,1,1}
}

functions={"Pack", "Faction", "Category", "Objective"}
selected = {1,1,1,1}
packs = {}
factionSelected=1
categorySelectd=1
objectiveSelected=1
showSetBtn = true

function selectedPack()
    return packs.data[packs.names[selected[1]]]
end

function onLoad(save_state)
    startGameObj= getObjectFromGUID(Global.getVar("startMenu_GUID"))
    blankCard = getObjectFromGUID(Global.getVar("blankObjCard_GUID"))
    if self.getGUID() == Global.getVar("redSecondaryManager_GUID") then
        self.setName("Secondary Objectives Manager Red")
        self.setPosition({-19,-5,35.25})
        self.setRotation({0,0,0})
        self.setScale({0.7,1,0.7})
        if blankCard then
            blankCard.setLock(true)
            blankCard.interactable=false
        end
    else
        self.setName("Secondary Objectives Manager Blue")
        self.setPosition({19,-5,-35.25})
        self.setRotation({0,180,0})
        self.setScale({0.7,1,0.7})
    end

    self.setScale({0.6,1,0.6})
    scoresheet = getObjectFromGUID(Global.getVar("scoresheet_GUID"))
    Wait.condition(packDataReady, function() return Global.getVar("packsStatus") ~= "pending" end, 5.0, function() broadcastToAll("Timed out waiting to download objectives", "Red") end)
end

function packDataReady()
    if Global.getVar("packsStatus") == "success" then
        packs = Global.getTable("packs")
        writeMenu()
    else
        broadcastToAll("Failed to download objectives, please check your connection.", "Red")
    end
end

function packDataTimeout()
    broadcastToAll("Timed out waiting to download objectives", "Red")
end

function writeMenu()
    self.clearButtons()
    self.createButton(titleBtn)
    local rows=4
    for i=1, rows do
        selectionBtn.position= {menuX, menuY, menuZ+(i-1)*btnRowOffset}
        upBtn.position= {menuX+arrowOffset, menuY, menuZ+(i-1)*btnRowOffset}
        downBtn.position= {menuX-arrowOffset, menuY, menuZ+(i-1)*btnRowOffset}
        if i==1 then
            selectionBtn.label="#"..selected[1].." "..selectedPack().name
        end
        if i==2 then
            selectionBtn.label="#"..selected[2].." "..selectedPack().factions[selected[2]].name
        end
        if i==3 then
            selectionBtn.label="#"..selected[3].." "..selectedPack().factions[selected[2]].categories[selected[3]].name
        end
        if i==4 then
            selectionBtn.tooltip=selectedPack().factions[selected[2]].categories[selected[3]].objectives[selected[4]].description
            selectionBtn.label="#"..selected[4].." "..selectedPack().factions[selected[2]].categories[selected[3]].objectives[selected[4]].name
        end
        upBtn.click_function= "up"..functions[i]
        downBtn.click_function= "down"..functions[i]
        self.createButton(selectionBtn)
        self.createButton(upBtn)
        self.createButton(downBtn)
    end
    spawnCardBtn.position= {menuX-3.3, menuY, menuZ+rows*btnRowOffset}
    self.createButton(spawnCardBtn)
    if startGameObj then
        if not startGameObj.getVar("inGame") then
            setObjBtn.position= {menuX+3.3, menuY, menuZ+rows*btnRowOffset}
            self.createButton(setObjBtn)
        end
    else
        setObjBtn.position= {menuX+3.3, menuY, menuZ+rows*btnRowOffset}
        self.createButton(setObjBtn)
    end
end

function setObj(obj, color, alt)
    if startGameObj.getVar("inGame") then
        printToColor("Game starded, cannot modify!", color, "Red")
        return
    end
    if scoresheet then
        if not scoresheet.getVar("scoresheetActive") then printToColor("Enable scoresheet first!", color, "Red") return end
        scoresheet.call("addSecondaryForPlayer", {clicker=color, packID=packs.names[selected[1]], name=selectedPack().factions[selected[2]].categories[selected[3]].objectives[selected[4]].name})
    end
end

function spawnCard(obj, color, alt)
    local obj=selectedPack().factions[selected[2]].categories[selected[3]].objectives[selected[4]]
    local id=obj.id
    createCard(obj.name, obj.description, obj.id, 0)
    if obj.actions then
        for i, action in ipairs(obj.actions) do
            createCard(action.name, action.description, action.id, i)
        end
    end
end

function createCard(name, desc, id, counter)
    local blankCardData = blankCard.getData()
    local clone = true
    local card = nil
    counter = counter * 12
    if clone then
        local newPos=self.positionToWorld({-16-counter,6,1.5})
        blankCardData.Transform.posX=newPos.x
        blankCardData.Transform.posY = 1.5
        blankCardData.Transform.posZ=newPos.z

        blankCardData.Transform.rotX= 0
        blankCardData.Transform.rotY= self.getRotation().y
        blankCardData.Transform.rotZ= 0

        blankCardData.Transform.scaleX= 6
        blankCardData.Transform.scaleY= 0.2
        blankCardData.Transform.scaleZ= 4

        blankCardData.ColorDiffuse = {r= 0.5, g= 0.5, b= 0.5}
        blankCardData.Nickname = name
        blankCardData.Description = desc
        blankCardData.GMNotes= id

        blankCardData.Locked = false
        card = spawnObjectData({data=blankCardData})
    else
        card = spawnObject({
            type = "BlockSquare",
            position = self.positionToWorld({-16-counter,7,1.5}),
            rotation = {0,0,0},
            scale = {2,0.2,3},
        })
    end
    Wait.frames(function() card.call("writeMenu") end, 2)
end

function upDown(counter, amt)
    local maxValue=1
    local currentValue=1
    local index= 1
    if counter == "pack" then
        maxValue=#packs.names
        index = 1

        selected[2] = 1
        selected[3] = 1
        selected[4] = 1

    end
    if counter == "faction" then
        maxValue=#selectedPack().factions
        index = 2
        selected[3] = 1
        selected[4] = 1
    end
    if counter == "category" then
        maxValue=#selectedPack().factions[selected[2]].categories
        index = 3
        selected[4] = 1
    end
    if counter == "objective" then
        maxValue=#selectedPack().factions[selected[2]].categories[selected[3]].objectives
        index = 4
    end
    currentValue = selected[index]
    currentValue = currentValue+ amt
    if currentValue < 1        then currentValue = maxValue end
    if currentValue > maxValue then currentValue = 1 end
    selected[index] = currentValue

    -- A previous version kept the scoresheet's selected mission pack in sync
    -- with the one selected here.  That's annoying when two players are trying
    -- to enter secondaries simultaneously, so we no longer do that, and instead
    -- when setting a secondary on the scoresheet, we specify the pack as well.
    --[[if counter == "pack" then
        if not startGameObj.getVar("inGame") then
            scoresheet.call("packFromExt", {index= selected[index]} )
        end
    end]]--
    writeMenu()
end

function upPack()
    upDown("pack", 1)
end

function downPack()
    upDown("pack", -1)
end

function upFaction()
    upDown("faction", 1)
end

function downFaction()
    upDown("faction", -1)
end

function upCategory()
    upDown("category", 1)
end

function downCategory()
    upDown("category", -1)
end

function upObjective()
    upDown("objective", 1)
end

function downObjective()
    upDown("objective", -1)
end


function none()
end
