-- FTC-GUID: f2f963
miniCamEnabled=false
followMini=false
mini=nil
--miniCam_GUID="856744"
miniCam_GUID=""
relativePosition={0,2,0}
relativeRotation={0,0,0}

miniCamBtnOLD = {
    label="Mini Cam - OFF", click_function="toggleMiniCam", function_owner=self,
    position={0/self.getScale().x,0.05,-2/self.getScale().z}, rotation={0,0,0}, height=430, width=2000,
    font_size=200, color="Black", font_color="White", scale={1/self.getScale().x,1,1/self.getScale().z}
}
miniCamLbl= "Action Cam - "
miniCamLbl= "ACTION CAM"

miniCamBtn = {
    label="TURN ON "..miniCamLbl, click_function="toggleMiniCam", function_owner=self,
    position={0,0.05,-2.2}, rotation={0,0,0}, height=350, width=2200,
    font_size=200, color="Black", font_color="White",
}
followBtn = {
    label="Follow - NO", click_function="toggleFollow", function_owner=self,
    position={-2,0.05, 2.1}, rotation={0,0,0}, height=200, width=1000,
    font_size=100, color="Black", font_color="White",
}
changeMiniBtn={
    label="Change\nobject", click_function="changeMini", function_owner=self,
    position={2.7,0.05, 2.35}, rotation={0,0,0}, height=350, width=500,
    font_size=100, color="Black", font_color="White",
}
positionBtn = {
    label="Relative Cam Position", click_function="setCamPosition", function_owner=self,
    position={-2.2,0.05, 2.1}, rotation={0,0,0}, height=200, width=1000,
    font_size=100, color="Black", font_color="White",
}
rotationBtn = {
    label="Relative Cam Rotation", click_function="setCamRotation", function_owner=self,
    position={-2.2,0.05, 2.6}, rotation={0,0,0}, height=200, width=1000,
    font_size=100, color="Black", font_color="White",
}
instructionsBtn={
    label="Instructions", click_function="toggleInstructions", function_owner=self,
    position={0,0.05,-2.8}, rotation={0,0,0}, height=200, width=800,
    font_size=100, color="Purple", font_color="White",
}

positionXIn ={
    label="X", value=0, input_function="setRelativePositionX", function_owner=self, alignment=3, validation=3,
    position={-0.5,0.05,2.1},  height=150, width=400,
    font_size=120, color="White", font_color="Black", tab=2,
    }
positionYIn ={
        label="Y", value=2, input_function="setRelativePositionY", function_owner=self, alignment=3, validation=3,
        position={0.5,0.05,2.1},  height=150, width=400,
        font_size=120, color="White", font_color="Black", tab=2,
        }
positionZIn ={
        label="Z", value=0, input_function="setRelativePositionZ", function_owner=self, alignment=3, validation=3,
            position={1.5,0.05,2.1},  height=150, width=400,
        font_size=120, color="White", font_color="Black", tab=2,
        }
rotationXIn ={
        label="X", value=0, input_function="setRelativeRotationX", function_owner=self, alignment=3, validation=3,
        position={-0.5,0.05,2.6},  height=150, width=400,
        font_size=120, color="White", font_color="Black", tab=2,
        }
rotationYIn ={
        label="Y", value=0, input_function="setRelativeRotationY", function_owner=self, alignment=3, validation=3,
        position={0.5,0.05,2.6},  height=150, width=400,
        font_size=120, color="White", font_color="Black", tab=2,
        }
rotationZIn ={
        label="Z", value=0, input_function="setRelativeRotationZ", function_owner=self, alignment=3, validation=3,
        position={1.5,0.05,2.6},  height=150, width=400,
        font_size=120, color="White", font_color="Black", tab=2,
        }


function onLoad()
    local all=getAllObjects()
    for i, obj in ipairs(all) do
        local channel=string.sub(self.getName(), 1, 4)
        if obj.getName() == channel.."Camera" then
            miniCam_GUID=obj.getGUID()
        end
    end
    miniCam=getObjectFromGUID(miniCam_GUID)
    miniCam.setInvisibleTo(Player.getColors())
    miniCam.setInvisibleTo()
    self.clearInputs()
    self.createInput(positionXIn)
    self.createInput(positionYIn)
    self.createInput(positionZIn)
    self.createInput(rotationXIn)
    self.createInput(rotationYIn)
    self.createInput(rotationZIn)
    writeMenu()
end

function writeMenu()
    self.clearButtons()
    self.createButton(miniCamBtn)
    self.createButton(positionBtn)
    self.createButton(rotationBtn)
    self.createButton(changeMiniBtn)
    self.createButton(instructionsBtn)


end

function toggleInstructions()

    if self.UI.getAttribute( "instructions",  "active") == "True" then
        self.UI.setAttribute( "instructions",  "active",  false)
    else
        self.UI.setAttribute( "instructions",  "active",  true)
    end
end

function toggleFollow()
    followMini = not followMini
end

function toggleMiniCam(obj, player, alt)
    --print(tostring(relativePosition[1]).."  "..tostring(relativePosition[2]).."  "..tostring(relativePosition[3]).."  ")
    --print(tostring(relativeRotation[1]).."  "..tostring(relativeRotation[2]).."  "..tostring(relativeRotation[3]).."  ")
    mini=Player[player].getSelectedObjects()[1]
    if mini == nil then
        printToAll("Must select an object", "Yellow")
    --    cameraUnfollow()
        return
    end
    if  miniCam == nil then
        printToAll("Camera not present. Big problem! :/", "Red")
    --    cameraUnfollow()
        return
    end
    miniCamEnabled = not miniCamEnabled
    if miniCamEnabled then
        miniCamBtn.label=miniCamLbl.."ON"
        miniCamBtn.label="TURN OFF "..miniCamLbl
        cameraFollow()
    else
        cameraUnfollow()
    end
end

function setCamPosition()
    if miniCam ~= nil and mini ~= nil then
        miniCam.setPosition(mini.positionToWorld(relativePosition))
    end
end

function setCamRotation()
    if miniCam ~= nil and mini ~= nil then
        miniCam.setRotation({mini.getRotation().x+relativeRotation[1],mini.getRotation().y+relativeRotation[2],mini.getRotation().z+relativeRotation[3]})
    end
end

function changeMini(obj, player, alt)
    if not miniCamEnabled then return end
    mini=Player[player].getSelectedObjects()[1]
    if mini == nil then
        printToAll("Must select an object", "Yellow")
    --    cameraUnfollow()
        return
    end
    cameraFollow()
end

function cameraFollow()
    if miniCam == nil then
        return
    end
    miniCam.setLock(true)
    miniCam.jointTo()

    miniCam.setPosition(mini.positionToWorld(relativePosition))
    miniCam.setRotation({mini.getRotation().x+relativeRotation[1],mini.getRotation().y+relativeRotation[2],mini.getRotation().z+relativeRotation[3]})
--    relativePosition={0,2,0}
--    relativeRotation={0,0,0}
    if followMini then
        miniCam.jointTo(mini, {
            ["type"]        = "Fixed",
            ["collision"]   = false,
            ["break_force"]  = 10000.0,
            ["break_torgue"] = 10000.0,
            })
        miniCam.setLock(false)
    end
    writeMenu()
end

function cameraUnfollow()
    if miniCam == nil then
        return
    end
    miniCam.setLock(true)
    miniCamBtn.label=miniCamLbl.."OFF"
    miniCamBtn.label="TURN ON  "..miniCamLbl
    miniCam.jointTo()
    miniCam.setPosition({120,0,0})
    miniCam.setRotation({90,90,0})
    miniCamEnabled=false
    writeMenu()
end

function setRelativePositionX(obj, color, input, stillEditing)
    if not stillEditing then
        relativePosition[1]=input
        setCamPosition()
    end
end
function setRelativePositionY(obj, color, input, stillEditing)
    if not stillEditing then
        relativePosition[2]=input
        setCamPosition()
    end
end
function setRelativePositionZ(obj, color, input, stillEditing)
    if not stillEditing then
        relativePosition[3]=input
        setCamPosition()
    end
end

function setRelativeRotationX(obj, color, input, stillEditing)
    if not stillEditing then
        relativeRotation[1]=input
        setCamRotation()
    end
end
function setRelativeRotationY(obj, color, input, stillEditing)
    if not stillEditing then
        relativeRotation[2]=input
        setCamRotation()
    end
end
function setRelativeRotationZ(obj, color, input, stillEditing)
    if not stillEditing then
        relativeRotation[3]=input
        setCamRotation()
    end
end

function none()
end